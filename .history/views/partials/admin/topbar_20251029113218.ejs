<header class="admin-header">
  <style>
    /* ==========================
       TOPBAR STYLES
    =========================== */
      :root {
        --bg-gradient-start: #e6f1e6;      /* light greenish background */
        --bg-gradient-end: #d4ead4;        /* slightly darker green */
        --primary-dark: #101b0d;           /* dark green */
        --primary: #2d4a24;                /* medium green */
        --accent-1: #4a7f3c;               /* accent green 1 */
        --accent-2: #7aae6b;               /* accent green 2 */
        --muted: #666;
        --text-dark: #1b2a17;              /* dark greenish text */
        --white: #ffffff;
      }

    .admin-header {
      background: linear-gradient(135deg, var(--primary), var(--primary-dark));
      color: #fff;
      /* header height adjusted to avoid overlapping content */
      height: 90px;
      padding: 20px 40px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      z-index: 1000;
    }

    .admin-header h1 {
      font-size: 1.4rem;
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 600;
    }

    .header-nav ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: flex;
      gap: 25px;
    }

    .header-nav a {
      color: #f1f1f1;
      text-decoration: none;
      font-weight: 500;
      font-size: 0.95rem;
      display: flex;
      align-items: center;
      gap: 8px;
      transition: 0.3s;
    }

    .header-nav a:hover {
      color: #ffc107;
    }

    .header-nav .active {
      color: #ffc107;
      border-bottom: 2px solid #ffc107;
      padding-bottom: 4px;
    }

    .topbar-right {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .notification-btn {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      background: var(--accent-1, #4a7f3c);
      color: white;
      font-size: 0.95rem;
      border: none;
      box-shadow: 0 8px 22px rgba(16,27,13,0.12);
      cursor: pointer;
      position: relative;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .notification-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 26px rgba(16,27,13,0.14);
    }

    .notification-badge {
      position: absolute;
      top: -6px;
      right: -6px;
      background: #ef4453;
      color: #ffffff;
      font-size: 0.72rem;
      min-width: 20px;
      height: 20px;
      padding: 0 6px;
      border-radius: 999px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      box-shadow: 0 6px 14px rgba(0,0,0,0.15);
      border: 3px solid var(--white, #ffffff);
    }

    .notification-dropdown {
      position: absolute;
      top: 60px;
      right: 0;
      background: #e7ebe5;
      border-radius: 12px;
      width: 330px;
      box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      display: none;
      animation: fadeIn 0.25s ease-in-out;
      z-index: 1000;
      font-family: 'Poppins', sans-serif;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .notification-dropdown header {
      background: linear-gradient(135deg, #8aac7c, #6d9360);
      color: #fff;
      padding: 12px 15px;
      font-weight: 600;
      font-size: 1rem;
      letter-spacing: 0.5px;
    }

    .notification-dropdown ul {
      list-style: none;
      margin: 0;
      padding: 0;
      max-height: 350px;
      overflow-y: auto;
    }

    .notification-dropdown ul::-webkit-scrollbar {
      width: 6px;
    }

    .notification-dropdown ul::-webkit-scrollbar-thumb {
      background: #cfcfcf;
      border-radius: 3px;
    }

    .notification-dropdown ul li {
      padding: 12px 15px;
      border-bottom: 1px solid #f1f1f1;
      transition: all 0.2s ease;
      cursor: pointer;
    }

    .notification-dropdown ul li:hover {
      background: #c0ddae;
    }

    .notification-dropdown ul li.unread {
      background: #82a071;
      font-weight: 600;
    }

    .notification-dropdown ul li small {
      display: block;
      color: #555;
      font-size: 0.8rem;
      margin-top: 3px;
    }

    .admin-profile {
      display: flex;
      align-items: center;
      gap: 8px;
      background: rgba(255, 255, 255, 0.1);
      padding: 6px 12px;
      border-radius: 20px;
    }

    .sidebar-toggle {
      background: none;
      border: none;
      color: white;
      cursor: pointer;
      font-size: 22px;
      display: none;
    }

    @media (max-width: 992px) {
      .sidebar-toggle {
        display: block;
      }
      .header-nav {
        display: none;
      }
    }

    .date-time {
      font-size: 0.85rem;
      opacity: 0.9;
      margin-top: 4px;
    }

    /* Side Toast Notification */
    .side-toast {
      position: fixed;
      top: 110px; /* place toast below the header */
      right: -350px;
      background: #2d4a24;
      color: white;
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: 0 6px 18px rgba(0,0,0,0.2);
      font-weight: 500;
      z-index: 2000;
      display: flex;
      align-items: center;
      gap: 10px;
      transition: right 0.5s ease, opacity 0.5s ease;
      opacity: 0;
    }

    .side-toast.show {
      right: 20px;
      opacity: 1;
    }
  </style>

  <div class="topbar-left">
    <h1><i class="fa-solid fa-chart-line"></i> Dashboard Overview</h1>
    <div class="date-time" id="currentDateTime"></div>
  </div>

  <div class="header-nav">
    <ul>
      <li><a href="/admin" class="<%= activePage === 'dashboard' ? 'active' : '' %>"><i class="fa-solid fa-house"></i> Home</a></li>
      <li><a href="/login/logout"><i class="fa-solid fa-right-from-bracket"></i>Log out</a></li>
    </ul>
  </div>

  <div class="topbar-right">
    <button id="sidebarToggle" class="sidebar-toggle" title="Toggle Sidebar">
      <i class="fa-solid fa-bars"></i>
    </button>

    <div class="icons">
      <button class="notification-btn" id="notificationBtn">
        <i class="fas fa-bell"></i>
        <span class="notification-badge" id="notificationCount">0</span>
      </button>

      <div class="notification-dropdown" id="notificationDropdown">
        <header>Notifications</header>
        <ul id="notificationList">
          <li>Loading notifications...</li>
        </ul>
      </div>
    </div>

      <div class="admin-profile">
      <i class="fas fa-user-shield"></i>
      <span>Admin</span>
    </div>
  </div>

  <!-- Side Toast -->
  <div class="side-toast" id="sideToast">
    <span>New notification received!</span>
  </div>

<script>
  // ==========================
  // DATE & TIME DISPLAY
  // ==========================
  function updateDateTime() {
    const now = new Date();
    document.getElementById("currentDateTime").textContent = now.toLocaleString();
  }
  updateDateTime();
  setInterval(updateDateTime, 60000);

  // ==========================
  // SIDE TOAST (POP-UP)
  // ==========================
  function showSideToast(message) {
    const toast = document.getElementById("sideToast");
    if (!toast) return;
    toast.querySelector("span").textContent = message;
    toast.classList.add("show");
    setTimeout(() => toast.classList.remove("show"), 4000);
  }

  // ==========================
  // FETCH NOTIFICATION LIST
  // ==========================
  let lastUnreadCount = 0;

  async function fetchNotificationList() {
    try {
      const response = await fetch("/admin/notification/list");
      const data = await response.json();

      const listContainer = document.getElementById("notificationList");
      const badge = document.getElementById("notificationCount");

      if (!data || data.length === 0) {
        listContainer.innerHTML = "<li>No recent notifications</li>";
        badge.textContent = "";
        return;
      }

      // Render notifications
      listContainer.innerHTML = data
        .map((item) => {
          const created = new Date(item.created_at).toLocaleString();
          const isUnread = item.is_read === 0;
          let label = '';
          let icon = '';
          
          if (item.type === "booking") {
            icon = '<i class="fas fa-book-open"></i>';
            label = `New booking: ${item.full_name} - Plot #${item.plot_number}`;
          } else if (item.type === "payment") {
            icon = '<i class="fas fa-money-bill-wave"></i>';
            const paymentType = item.payment_type === 'fullpayment' ? 'Full payment' : 'Down payment';
            label = `${paymentType} received: Plot #${item.plot_number} - â‚±${parseFloat(item.amount).toLocaleString('en-PH')}`;
          }

          return `
            <li class="${isUnread ? "unread" : ""}" 
                onclick="markAsRead(${item.id}, '${item.type}')">
              ${icon} ${label}
              <small>
                ${created}
                ${item.status ? `<span class="status-badge ${item.status.toLowerCase()}">${item.status}</span>` : ''}
              </small>
            </li>`;
        })
        .join("");

      // Update unread badge
      const unreadCount = data.filter((n) => n.is_read === 0).length;
      badge.textContent = unreadCount > 0 ? unreadCount : "";
      badge.style.display = unreadCount > 0 ? "inline-flex" : "none";

      // Side toast if new notification came in
      if (unreadCount > lastUnreadCount) {
        showSideToast("New notification received!");
      }
      lastUnreadCount = unreadCount;
    } catch (err) {
      console.error("Error fetching notifications:", err);
    }
  }

  // ==========================
  // MARK AS READ + REDIRECT
  // ==========================
  // mark single notification (exposed globally)
  async function markAsRead(id, type) {
    try {
      await fetch(`/admin/notification/mark-read/${id}`, { method: "POST" });
      // keep behavior: redirect for booking/payment types
      if (type === "booking") {
        window.location.href = "/adminviewapp";
      } else if (type === "downpayment" || type === "fullpayment") {
        window.location.href = "/adminviewbookings";
      } else {
        // refresh badge + list on other pages
        if (window.fetchNotificationCount) window.fetchNotificationCount();
        if (window.fetchNotificationList) window.fetchNotificationList();
      }
    } catch (err) {
      console.error("Error marking as read:", err);
    }
  }

  // ==========================
  // INITIAL LOAD + REFRESH
  // ==========================
  // expose to global so other pages can call
  window.fetchNotificationList = fetchNotificationList;

  // fetch unread count for badge
  async function fetchNotificationCount() {
    try {
      const resp = await fetch('/admin/notification/count', { credentials: 'include' });
      if (!resp.ok) return;
      const data = await resp.json();
      const count = data.count || 0;
      const badge = document.getElementById('notificationCount');
      if (badge) {
        badge.textContent = count > 0 ? (count > 99 ? '99+' : count) : '';
        badge.style.display = count > 0 ? 'inline-flex' : 'none';
      }
    } catch (e) {
      // ignore
    }
  }

  window.fetchNotificationCount = fetchNotificationCount;

  // expose mark functions globally (markAsRead already defined)
  window.markAsRead = markAsRead;

  async function markAllAsRead() {
    try {
      const resp = await fetch('/admin/notification/markAllAsRead', { method: 'POST' });
      if (resp.ok) {
        if (window.fetchNotificationCount) window.fetchNotificationCount();
        if (window.fetchNotificationList) window.fetchNotificationList();
        showSideToast('All notifications marked read');
      } else {
        showSideToast('Failed to mark all notifications');
      }
    } catch (e) {
      console.error('markAllAsRead error', e);
    }
  }

  window.markAllAsRead = markAllAsRead;

  // initial calls and polling
  fetchNotificationList();
  fetchNotificationCount();
  setInterval(fetchNotificationList, 10000);
  setInterval(fetchNotificationCount, 30000);

  // ==========================
  // DROPDOWN & SIDEBAR TOGGLE
  // ==========================
  const notifBtn = document.getElementById("notificationBtn");
  const notifDropdown = document.getElementById("notificationDropdown");
  const sidebarToggle = document.getElementById("sidebarToggle");
  const adminMain = document.querySelector(".admin-main");

  notifBtn.addEventListener("click", () => {
    notifDropdown.style.display =
      notifDropdown.style.display === "block" ? "none" : "block";
  });

  sidebarToggle.addEventListener("click", () => {
    adminMain.classList.toggle("collapsed");
    const sidebar = document.querySelector(".sidebar");
    sidebar.classList.toggle("active");
  });

  document.addEventListener("click", (e) => {
    if (!notifBtn.contains(e.target) && !notifDropdown.contains(e.target)) {
      notifDropdown.style.display = "none";
    }
  });

  // Ensure Font Awesome is loaded; if not, inject CDN link into head
  (function ensureFontAwesome() {
    try {
      const hasFA = !!document.querySelector('link[href*="font-awesome"], link[href*="fontawesome"], link[href*="cdnjs.cloudflare.com/ajax/libs/font-awesome"]');
      if (!hasFA) {
        const l = document.createElement('link');
        l.rel = 'stylesheet';
        l.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css';
        l.crossOrigin = 'anonymous';
        document.head.appendChild(l);
      }
    } catch (e) {}
  })();
</script>

</header>
