<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Create Appointment | Everlasting Peace Memorial Park</title>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <!-- Main Admin CSS -->
  <link rel="stylesheet" href="/stylesheets/admin.css" />
  <link rel="stylesheet" href="/stylesheets/admincreateb.css" />
</head>
<body>
  <!-- ===== HEADER (Topbar + Hamburger) ===== -->
  <%- include('partials/admin/topbar', { activePage: 'createAppointment' }) %>
  <div style="height: 120px;"></div> <!-- Spacer for fixed header -->

  <!-- ===== MAIN LAYOUT ===== -->
  <main class="admin-main">
    <!-- Sidebar -->
    <%- include('partials/admin/sidebar', { activePage: 'createAppointment' }) %>

    <!-- ===== CONTENT AREA ===== -->
    <section class="content">
      <!-- Topbar -->
      <header class="topbar">
        <div class="topbar-left">
          <h2>Create New Appointment</h2>
          <div class="date-time" id="currentDateTime"></div>
        </div>
        <div class="icons">
          <!-- Notification Bell -->
          <button class="notification-btn" id="notificationBtn">
            <i class="fas fa-bell"></i>
            <span class="notification-badge" id="notificationCount">0</span>
          </button>

          <!-- Notification Dropdown -->
          <div class="notification-dropdown" id="notificationDropdown">
            <header>Notifications</header>
            <ul id="notificationList">
              <li>Loading notifications...</li>
            </ul>
          </div>
        </div>
      </header>

      <!-- ===== FORM SECTION ===== -->
      <div class="form-card">
        <p class="form-subtitle">Please fill in the details below to book an appointment.</p>

        <% if (typeof success !== 'undefined' && success) { %>
          <div class="success-message" id="successMessage">Appointment successfully created! Booking ID: <%= bookingId %></div>
        <% } else { %>
          <div class="success-message" id="successMessage" style="display:none;">Appointment successfully created!</div>
        <% } %>
        <% if (typeof error !== 'undefined' && error) { %>
          <div class="error-message" style="display:block;margin-bottom:1rem;color:#b00020;"><%= error %></div>
        <% } %>

        <form id="appointmentForm" method="POST" action="/admincreateb">
          <div class="form-grid">
            <div class="form-group">
              <label for="fullname">Full Name *</label>
              <input type="text" id="fullname" name="fullname" required placeholder="Enter full name" />
              <div class="error-message" id="fullnameError"></div>
            </div>

            <div class="form-group">
              <label for="phone">Phone Number *</label>
              <input type="tel" id="phone" name="phone" required placeholder="(123) 456-7890" />
              <div class="error-message" id="phoneError"></div>
            </div>

            <div class="form-group">
              <label for="email">Email Address</label>
              <input type="email" id="email" name="email" placeholder="your.email@example.com" />
              <div class="error-message" id="emailError"></div>
            </div>

            <div class="form-group">
              <label for="service">Service Type *</label>
              <select id="service" name="service" required>
                <option value="" disabled selected>Select Service</option>
                <option value="burial">Burial Service</option>
                <option value="memorial">Memorial Service</option>
              </select>
              <div class="error-message" id="serviceError"></div>
            </div>

            <div class="form-group">
              <label for="plot_id">Link to Plot (optional)</label>
              <select id="plot_id" name="plot_id">
                <option value="" selected>-- No plot --</option>
                <% if (typeof plots !== 'undefined' && Array.isArray(plots)) { %>
                  <% plots.forEach(p => { %>
                    <option value="<%= p.plot_id %>">Plot <%= p.plot_number %> — <%= p.location %> (₱<%= p.price %>)</option>
                  <% }) %>
                <% } %>
              </select>
              <div class="error-message" id="plotError"></div>
            </div>

            <div class="form-group">
              <label for="payment_method">Payment Received?</label>
              <select id="payment_method" name="payment_method">
                <option value="none" selected>No (record later)</option>
                <option value="cash">Cash (record now)</option>
              </select>
            </div>

            <div class="form-group" id="cashFields" style="display:none">
              <label for="payment_option">Payment Option</label>
              <select id="payment_option" name="payment_option">
                <option value="fullpayment">Full Payment</option>
                <option value="downpayment">Downpayment (installment)</option>
              </select>

              <div id="fullFields">
                <label for="cash_amount">Amount Received (₱)</label>
                <input type="number" step="0.01" min="0" id="cash_amount" name="cash_amount" placeholder="0.00" />
                <div class="error-message" id="cashError"></div>
              </div>

              <div id="downFields" style="display:none;margin-top:8px">
                <label for="monthly_amount">Monthly Amount (₱)</label>
                <input type="number" step="0.01" min="0" id="monthly_amount" name="monthly_amount" placeholder="0.00" />
                <label for="months">Months</label>
                <input type="number" min="1" id="months" name="months" placeholder="e.g., 12" />
                <div class="error-message" id="downError"></div>
              </div>
            </div>

            <div class="form-group">
              <label for="date">Date of Appointment *</label>
              <input type="date" id="date" name="date" required />
              <div class="error-message" id="dateError"></div>
            </div>

            <div class="form-group">
              <label for="time">Preferred Time *</label>
              <select id="time" name="time" required>
                <option value="" disabled selected>Select Time</option>
                <option value="09:00">9:00 AM</option>
                <option value="10:00">10:00 AM</option>
                <option value="11:00">11:00 AM</option>
                <option value="13:00">1:00 PM</option>
                <option value="14:00">2:00 PM</option>
                <option value="15:00">3:00 PM</option>
                <option value="16:00">4:00 PM</option>
              </select>
              <div class="error-message" id="timeError"></div>
            </div>

            <!-- Deceased info for burial (only shown when service=burial) -->
            <div class="form-group" id="deceasedFields" style="display:none">
              <label>Deceased Details (for Burial)</label>
              <input type="text" id="deceased_firstName" name="deceased_firstName" placeholder="Deceased First Name" />
              <input type="text" id="deceased_lastName" name="deceased_lastName" placeholder="Deceased Last Name" style="margin-top:6px" />
              <label for="birth_date">Birth Date</label>
              <input type="date" id="birth_date" name="birth_date" />
              <label for="death_date">Death Date</label>
              <input type="date" id="death_date" name="death_date" />
              <div class="error-message" id="deceasedError"></div>
            </div>

            <div class="form-group full-width">
              <label for="notes">Additional Notes</label>
              <textarea id="notes" name="notes" rows="4" placeholder="Any special requests or details..."></textarea>
            </div>
          </div>

          <div class="form-actions">
            <button type="button" class="btn btn-secondary" id="clearBtn">Clear Form</button>
            <button type="submit" class="btn btn-primary" id="submitBtn">Create Appointment</button>
          </div>
        </form>
      </div>
    </section>
  </main>

  <!-- ===== TOAST NOTIFICATION ===== -->
  <div id="toast" class="toast">
    <i class="fas fa-bell"></i>
    <span id="toastMessage">New Notification</span>
  </div>

  <!-- ===== SCRIPTS ===== -->
  <script>
    // Sidebar toggle
    const sidebarToggle = document.getElementById('sidebarToggle');
    const adminMain = document.querySelector('.admin-main');
    sidebarToggle.addEventListener('click', () => {
      adminMain.classList.toggle('collapsed');
    });

    // Update date/time
    function updateDateTime() {
      const now = new Date();
      document.getElementById("currentDateTime").textContent = now.toLocaleString();
    }
    updateDateTime();
    setInterval(updateDateTime, 60000);

    // Notification toggle
    const notificationBtn = document.getElementById("notificationBtn");
    const notificationDropdown = document.getElementById("notificationDropdown");

    notificationBtn.addEventListener("click", () => {
      notificationDropdown.classList.toggle("active");
    });

    // Toast Notification Logic
    const toast = document.getElementById("toast");
    const toastMessage = document.getElementById("toastMessage");

    function showToast(message) {
      toastMessage.textContent = message;
      toast.classList.add("show");
      setTimeout(() => toast.classList.remove("show"), 4000);
    }

    // Simulated Notifications (replace with fetch from backend if needed)
    const notificationList = document.getElementById("notificationList");
    const notificationCount = document.getElementById("notificationCount");

    function loadNotifications() {
      const sampleNotifications = [
        "New booking request received.",
        "Appointment confirmed for Oct 30.",
        "System backup completed successfully.",
      ];
      notificationList.innerHTML = "";
      sampleNotifications.forEach(msg => {
        const li = document.createElement("li");
        li.textContent = msg;
        notificationList.appendChild(li);
      });
      notificationCount.textContent = sampleNotifications.length;
      showToast("You have new notifications!");
    }

    setTimeout(loadNotifications, 2000);

    // Clear form
    document.getElementById("clearBtn").addEventListener("click", () => {
      document.getElementById("appointmentForm").reset();
    });

    // Client-side validation before submit
    // Toggle plot requirement when service=burial and toggle cash fields
    const serviceEl = document.getElementById('service');
    const plotEl = document.getElementById('plot_id');
    const paymentMethodEl = document.getElementById('payment_method');
    const cashFields = document.getElementById('cashFields');
    const cashAmountEl = document.getElementById('cash_amount');
  const paymentOptionEl = document.getElementById('payment_option');
  const downFields = document.getElementById('downFields');
  const monthlyAmountEl = document.getElementById('monthly_amount');
  const monthsEl = document.getElementById('months');
  const deceasedFields = document.getElementById('deceasedFields');
  const deceasedFirstEl = document.getElementById('deceased_firstName');
  const deceasedLastEl = document.getElementById('deceased_lastName');
  const birthDateEl = document.getElementById('birth_date');
  const deathDateEl = document.getElementById('death_date');

    function updateFormState() {
      if (serviceEl && serviceEl.value === 'burial') {
        // make plot required visually
        plotEl.required = true;
        // show deceased fields
        if (deceasedFields) deceasedFields.style.display = 'block';
        // require time for burial
        if (timeEl) timeEl.required = true;
      } else {
        plotEl.required = false;
        if (deceasedFields) deceasedFields.style.display = 'none';
        if (timeEl) timeEl.required = (serviceEl && serviceEl.value === 'memorial');
      }
      if (paymentMethodEl && paymentMethodEl.value === 'cash') {
        cashFields.style.display = 'block';
        cashAmountEl.required = true;
        // when cash fields are visible, ensure payment option UI reflects current selection
        if (paymentOptionEl) updatePaymentOption();
      } else {
        cashFields.style.display = 'none';
        cashAmountEl.required = false;
      }
    }

    // ensure timeEl defined and only required for memorial/burial
    const timeEl = document.getElementById('time');

    function updatePaymentOption() {
      if (!paymentOptionEl) return;
      if (paymentOptionEl.value === 'downpayment') {
        downFields.style.display = 'block';
        monthlyAmountEl.required = true;
        monthsEl.required = true;
        cashAmountEl.required = true; // initial downpayment amount required
      } else {
        downFields.style.display = 'none';
        monthlyAmountEl.required = false;
        monthsEl.required = false;
        cashAmountEl.required = true;
      }
    }

  if (serviceEl) serviceEl.addEventListener('change', updateFormState);
    if (paymentMethodEl) paymentMethodEl.addEventListener('change', updateFormState);
  if (paymentOptionEl) paymentOptionEl.addEventListener('change', updatePaymentOption);

    updateFormState();

    document.getElementById('appointmentForm').addEventListener('submit', function (e) {
      // Clear previous errors
      ['fullnameError','phoneError','emailError','serviceError','dateError','timeError','plotError'].forEach(id => {
        const el = document.getElementById(id);
        if (el) el.textContent = '';
      });

      const fullname = document.getElementById('fullname').value.trim();
      const phone = document.getElementById('phone').value.trim();
      const email = document.getElementById('email').value.trim();
      const service = document.getElementById('service').value;
  const date = document.getElementById('date').value;
  const time = document.getElementById('time').value;
      let valid = true;

      if (!fullname) { document.getElementById('fullnameError').textContent = 'Full name is required.'; valid = false; }
      const phoneRe = /^[0-9\-\s\(\)\+]{7,20}$/;
      if (!phone || !phoneRe.test(phone)) { document.getElementById('phoneError').textContent = 'Enter a valid phone number.'; valid = false; }
      if (email && !/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) { document.getElementById('emailError').textContent = 'Enter a valid email.'; valid = false; }
      if (!service) { document.getElementById('serviceError').textContent = 'Please select a service.'; valid = false; }
      // If burial, ensure a plot is selected
      if (service === 'burial') {
        const pid = document.getElementById('plot_id').value;
        if (!pid) { document.getElementById('plotError').textContent = 'Please select a plot for burial service.'; valid = false; }
      }
      // If burial, validate deceased fields
      if (service === 'burial') {
        const dfn = (deceasedFirstEl && deceasedFirstEl.value || '').trim();
        const dln = (deceasedLastEl && deceasedLastEl.value || '').trim();
        const bd = (birthDateEl && birthDateEl.value) || '';
        const dd = (deathDateEl && deathDateEl.value) || '';
        if (!dfn || !dln || !bd || !dd) {
          document.getElementById('deceasedError').textContent = 'Please fill deceased details for burial.';
          valid = false;
        }
      }
      if (!date) { document.getElementById('dateError').textContent = 'Please select a date.'; valid = false; }
  // time is only required for memorial and burial
  if ((service === 'memorial' || service === 'burial') && !time) { document.getElementById('timeError').textContent = 'Please select a time.'; valid = false; }

      // Prevent past dates
      if (date) {
        const sel = new Date(date + 'T' + (time || '00:00') + ':00');
        const now = new Date();
        if (sel < now) { document.getElementById('dateError').textContent = 'Date/time must be in the future.'; valid = false; }
      }

      // If cash selected, validate cash amount
      if (paymentMethodEl && paymentMethodEl.value === 'cash') {
        const amt = parseFloat(cashAmountEl.value);
        if (Number.isNaN(amt) || amt <= 0) {
          document.getElementById('cashError').textContent = 'Enter a valid amount received.';
          valid = false;
        }
        // if downpayment option, validate monthly and months
        if (paymentOptionEl && paymentOptionEl.value === 'downpayment') {
          const monthly = parseFloat(monthlyAmountEl.value);
          const monthsVal = parseInt(monthsEl.value, 10);
          if (Number.isNaN(monthly) || monthly <= 0) {
            document.getElementById('downError').textContent = 'Enter a valid monthly amount.';
            valid = false;
          }
          if (Number.isNaN(monthsVal) || monthsVal <= 0) {
            document.getElementById('downError').textContent = 'Enter a valid months count.';
            valid = false;
          }
        }
      }

      if (!valid) {
        e.preventDefault();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }
    });
  </script>
</body>
</html>
