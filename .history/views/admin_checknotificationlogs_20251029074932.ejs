<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin | Notification Logs</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="stylesheet" href="/stylesheets/admin.css">
  <link rel="stylesheet" href="/stylesheets/staff_installments.css">
  <style>
    /* Layout tweaks for the notification logs inside admin layout */
  .content { padding: 2rem 2.5rem; }

    .table-card {
      background: #fff8f3;
      border-radius: 12px;
      padding: 12px;
      box-shadow: 0 6px 18px rgba(0,0,0,0.04);
      overflow: auto;
      margin: 0 10px; /* give breathing room from the sidebar */
      /* contain table scrolling here so sticky header doesn't overlap fixed topbar */
      max-height: calc(100vh - 220px);
    }

    #notifTable {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      min-width: 900px; /* keep columns readable */
      table-layout: fixed; /* make colgroup widths respected and enable truncation */
    }

    #notifTable thead th {
      background: linear-gradient(90deg, #4a6b46, #5c8754);
      color: white;
      font-weight: 600;
      padding: 12px 14px;
      text-align: left;
      position: sticky;
      top: 0; /* sticky relative to the .table-card scrolling container */
      z-index: 5;
      box-shadow: 0 2px 6px rgba(0,0,0,0.06);
    }

    #notifTable tbody td {
      padding: 12px 14px;
      border-bottom: 1px solid rgba(0,0,0,0.04);
      vertical-align: middle;
    }

    /* truncation for narrow columns */
    .small-id { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; max-width: 80px; }
    .timestamp { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    #notifTable td:nth-child(4) { /* message column */ word-wrap: break-word; white-space: normal; }

    .unread { background-color: #fff7dc; }
    .read { background-color: #f6f8f7; }

    .btn-mark {
      background: #4a6b46;
      color: #fff;
      border: none;
      padding: 8px 12px;
      border-radius: 8px;
      cursor: pointer;
      font-size: 13px;
    }

    .btn-mark:hover { transform: translateY(-1px); }

    .actions { display:flex; align-items:center; gap:10px; }
    .filter-container { display:flex; align-items:center; gap:8px; }

    @media (max-width: 1100px) {
      #notifTable { min-width: 700px; }
    }

    @media (max-width: 700px) {
      .actions { flex-direction: column; align-items: stretch; }
      #notifTable { min-width: 100%; }
    }
  </style>
</head>
<body>
  <%- include('partials/admin/topbar', { activePage: 'notificationLogs' }) %>
  <div style="height: 90px;"></div>

  <main class="admin-main">
    <%- include('partials/admin/sidebar', { activePage: 'notificationLogs' }) %>

    <section class="content">
      <header style="display:flex;justify-content:space-between;align-items:center;gap:12px;flex-wrap:wrap;margin-bottom:12px;">
        <h1>Notification Logs</h1>
        <div class="actions">
          <input id="searchInput" type="text" placeholder="🔍 Search notification...">

          <div class="filter-container">
            <label>From:</label>
            <input type="date" id="startDate" value="<%= startDate %>">
            <label>To:</label>
            <input type="date" id="endDate" value="<%= endDate %>">
            <button class="btn-filter" onclick="applyDateFilter()"><i class="fa-solid fa-filter"></i> Apply</button>
          </div>

          <label for="recordsPerPage">Records per page:</label>
          <select id="recordsPerPage" class="filter-select">
            <option value="5">5</option>
            <option value="10" selected>10</option>
            <option value="25">25</option>
            <option value="50">50</option>
          </select>

          <button class="btn-all" onclick="markAllAsRead()">
            <i class="fa-regular fa-envelope-open"></i> Mark All as Read
          </button>
        </div>
      </header>

      <div class="table-card">
        <table id="notifTable">
          <colgroup>
            <col style="width:60px"> <!-- Notif ID -->
            <col style="width:160px"> <!-- User -->
            <col style="width:220px"> <!-- Email -->
            <col> <!-- Message (flexible) -->
            <col style="width:80px"> <!-- Booking ID -->
            <col style="width:80px"> <!-- Payment ID -->
            <col style="width:80px"> <!-- Plot ID -->
            <col style="width:160px"> <!-- Date -->
            <col style="width:80px"> <!-- Status -->
            <col style="width:120px"> <!-- Action -->
          </colgroup>
          <thead>
            <tr>
              <th style="width:70px">Notif ID</th>
              <th>User</th>
              <th style="width:220px">Email</th>
              <th>Message</th>
              <th style="width:90px">Booking ID</th>
              <th style="width:90px">Payment ID</th>
              <th style="width:90px">Plot ID</th>
              <th style="width:160px">Date</th>
              <th style="width:80px">Status</th>
              <th style="width:120px">Action</th>
            </tr>
          </thead>
          <tbody>
            <% if (notifications.length === 0) { %>
              <tr class="empty-state-row"><td colspan="10">No notifications found.</td></tr>
            <% } else { %>
              <% notifications.forEach(n => { %>
                <tr class="<%= n.is_read ? 'read' : 'unread' %>">
                  <td><%= n.notif_id %></td>
                  <td><%= n.fullName || 'Unknown User' %></td>
                  <td><%= n.email || '—' %></td>
                  <td><%= n.message %></td>
                  <td class="small-id"><%= n.booking_id || '—' %></td>
                  <td class="small-id"><%= n.payment_id || '—' %></td>
                  <td class="small-id"><%= n.plot_id || '—' %></td>
                  <td class="timestamp"><%= new Date(n.datestamp).toLocaleString() %></td>
                  <td><%= n.is_read ? 'Read' : 'Unread' %></td>
                  <td>
                    <% if (!n.is_read) { %>
                      <button class="btn-mark" onclick="markAsRead('<%= n.notif_id %>')">Mark as Read</button>
                    <% } else { %>
                      <span style="color: #888;">—</span>
                    <% } %>
                  </td>
                </tr>
              <% }) %>
            <% } %>
          </tbody>
        </table>
        <!-- Pagination Controls -->
        <div class="pagination" style="display:flex;align-items:center;gap:8px;margin-top:12px;">
          <button id="prevPage" class="btn-page" disabled>
            <i class="fas fa-chevron-left"></i> Previous
          </button>
          <div id="pageNumbers" class="page-numbers"></div>
          <button id="nextPage" class="btn-page">
            Next <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
    </section>
  </main>

  <script>
    // client-side pagination (similar to inventory)
    let currentPage = 1;
    let filteredRows = [];

    function filterTable() {
      const searchTerm = document.getElementById('searchInput').value.toLowerCase();
      const allRows = Array.from(document.querySelectorAll('#notifTable tbody tr'))
        .filter(r => !r.classList.contains('empty-state-row'));

      filteredRows = allRows.filter(row => {
        const rowText = row.textContent.toLowerCase();
        return rowText.includes(searchTerm);
      });

      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    }

    function updatePagination() {
      const itemsPerPage = parseInt(document.getElementById('recordsPerPage').value);
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage) || 1;
      const pageNumbers = document.getElementById('pageNumbers');
      pageNumbers.innerHTML = '';

      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);
      if (endPage - startPage < 4) startPage = Math.max(1, endPage - 4);

      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement('button');
        btn.textContent = i;
        btn.className = i === currentPage ? 'active' : '';
        btn.onclick = () => { currentPage = i; updatePagination(); displayCurrentPage(); };
        pageNumbers.appendChild(btn);
      }

      document.getElementById('prevPage').disabled = currentPage === 1;
      document.getElementById('nextPage').disabled = currentPage === totalPages;
    }

    function displayCurrentPage() {
      const itemsPerPage = parseInt(document.getElementById('recordsPerPage').value);
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      const pageRows = filteredRows.slice(start, end);

      document.querySelectorAll('#notifTable tbody tr').forEach(row => row.style.display = 'none');
      pageRows.forEach(r => r.style.display = '');

      // show empty-state if none
      const emptyRow = document.querySelector('#notifTable tbody tr.empty-state-row');
      if (emptyRow) emptyRow.style.display = (filteredRows.length === 0) ? '' : 'none';
    }

    // wire search and records-per-page
    document.getElementById('searchInput').addEventListener('input', filterTable);
    document.getElementById('recordsPerPage').addEventListener('change', () => { currentPage = 1; updatePagination(); displayCurrentPage(); });

    document.getElementById('prevPage').addEventListener('click', () => { if (currentPage > 1) { currentPage--; updatePagination(); displayCurrentPage(); } });
    document.getElementById('nextPage').addEventListener('click', () => { const itemsPerPage = parseInt(document.getElementById('recordsPerPage').value); const totalPages = Math.ceil(filteredRows.length / itemsPerPage) || 1; if (currentPage < totalPages) { currentPage++; updatePagination(); displayCurrentPage(); } });

    // initial pagination setup once DOM rows are ready
    window.addEventListener('load', () => { filterTable(); updatePagination(); displayCurrentPage(); });

    // 📅 Apply Date Filter (keeps server-side filtering)
    function applyDateFilter() {
      const start = document.getElementById("startDate").value;
      const end = document.getElementById("endDate").value;
      if (!start || !end) {
        alert("Please select both start and end dates.");
        return;
      }
      window.location.href = `/admin/checknotificationlogs?startDate=${start}&endDate=${end}`;
    }

    // Use global mark functions exposed by topbar. These will refresh counts/list when appropriate.
    function markAsRead(id) {
      if (!confirm('Mark this notification as read?')) return;
      // call global function if available
      if (window.markAsRead) {
        window.markAsRead(id);
        // reload page after small delay to show change
        setTimeout(() => location.reload(), 500);
        return;
      }
      fetch(`/admin/notification/mark-read/${id}`, { method: 'POST' })
        .then(() => { alert('Notification marked as read.'); location.reload(); })
        .catch(() => alert('Error updating notification status.'));
    }

    function markAllAsRead() {
      if (!confirm('Mark all notifications as read?')) return;
      if (window.markAllAsRead) {
        window.markAllAsRead();
        setTimeout(() => location.reload(), 500);
        return;
      }
      fetch(`/admin/notification/markAllAsRead`, { method: 'POST' })
        .then(res => res.json())
        .then(data => { alert(data.message); location.reload(); })
        .catch(() => alert('Error updating all notifications.'));
    }
  </script>
</body>
</html>
      