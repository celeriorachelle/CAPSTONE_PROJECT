<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>View Appointments | Everlasting Peace Memorial Park</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="stylesheet" href="/stylesheets/adminviewapp.css">
<body>
  <header class="admin-header">
    <h1>Admin Dashboard</h1>
    <nav>
      <ul>
        <li><a href="/admin"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/adminviewapp" class="active"><i class="fas fa-calendar-alt"></i> Appointments</a></li>
        <li><a href="/burialrecord"><i class="fas fa-book"></i> Bookings</a></li>
        <li><a href="/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
      </ul>
    </nav>
  </header>

  <main class="admin-main">
    <aside class="sidebar">
      <h3><i class="fas fa-calendar-check"></i> Appointments</h3>
      <ul>
        <li><a href="/admin"><i class="fas fa-home"></i> Dashboard Home</a></li>
        <li><a href="/admincreateb"><i class="fas fa-plus-circle"></i> Create Appointment</a></li>
        <li><a href="/adminviewapp" class="active"><i class="fas fa-list"></i> View Appointments</a></li>
        <li><a href="/burialrecord"><i class="fas fa-book"></i> Burial Records</a></li>
        <li><a href="/maps"><i class="fas fa-map"></i> Cemetery Map</a></li>
      </ul>

      <h3><i class="fas fa-filter"></i> Filter by Status</h3>
      <div class="filters">
        <button onclick="filterStatus('all')" class="active" id="filter-all">
          <i class="fas fa-list"></i> All Appointments
        </button>
        <button onclick="filterStatus('pending')" id="filter-pending">
          <i class="fas fa-clock"></i> Pending
        </button>
        <button onclick="filterStatus('approved')" id="filter-approved">
          <i class="fas fa-check-circle"></i> Approved
        </button>
        <button onclick="filterStatus('ongoing')" id="filter-ongoing">
          <i class="fas fa-spinner"></i> Ongoing
        </button>
        <button onclick="filterStatus('completed')" id="filter-completed">
          <i class="fas fa-check-double"></i> Completed
        </button>
        <button onclick="filterStatus('cancelled')" id="filter-cancelled">
          <i class="fas fa-times-circle"></i> Cancelled
        </button>
      </div>
    </aside>

    <section class="content">
      <div class="content-header">
        <h2>All Appointments</h2>
        <div class="search-controls">
          <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Search appointments..." id="searchInput">
          </div>
          <button class="btn-export" onclick="exportAppointments()">
            <i class="fas fa-download"></i> Export
          </button>
        </div>
      </div>

      <!-- Statistics Cards -->
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">üìä</div>
          <div class="stat-number" id="totalAppointments">0</div>
          <div class="stat-label">Total Appointments</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">‚è≥</div>
          <div class="stat-number" id="pendingCount">0</div>
          <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">‚úÖ</div>
          <div class="stat-number" id="approvedCount">0</div>
          <div class="stat-label">Approved</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">üîÑ</div>
          <div class="stat-number" id="ongoingCount">0</div>
          <div class="stat-label">Ongoing</div>
        </div>
      </div>

      <!-- Appointments Table -->
      <div class="appointments-container">
        <div class="table-header">
          <h3><i class="fas fa-calendar-alt"></i> Appointments List</h3>
          <span id="appointmentCount">Loading...</span>
        </div>

        <div id="loadingState" class="loading">
          <div class="spinner"></div>
        </div>

        <div id="appointmentsTableContainer" style="display: none;">
          <table class="appointments-table">
            <thead>
              <tr>
                <th><i class="fas fa-hashtag"></i> ID</th>
                <th><i class="fas fa-user"></i> Client Name</th>
                <th><i class="fas fa-calendar"></i> Date</th>
                <th><i class="fas fa-clock"></i> Time</th>
                <th><i class="fas fa-cog"></i> Service</th>
                <th><i class="fas fa-info-circle"></i> Status</th>
                <th><i class="fas fa-tools"></i> Actions</th>
              </tr>
            </thead>
            <tbody id="appointmentsTableBody">
              <!-- Appointments will be populated here -->
            </tbody>
          </table>
        </div>

        <div id="emptyState" class="empty-state" style="display: none;">
          <i class="fas fa-calendar-times"></i>
          <h3>No Appointments Found</h3>
          <p>No appointments match your current filter criteria.</p>
        </div>

        <div class="pagination" id="paginationContainer" style="display: none;">
          <button onclick="changePage('prev')" id="prevBtn">
            <i class="fas fa-chevron-left"></i> Previous
          </button>
          <span id="pageInfo">Page 1 of 1</span>
          <button onclick="changePage('next')" id="nextBtn">
            Next <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
    </section>
  </main>

  <footer>
        <%- include('partials/footer') %>
    </footer>
    
  <!-- Appointment Details Modal -->
  <div id="appointmentModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-info-circle"></i> Appointment Details</h3>
        <span class="close" onclick="closeModal()">&times;</span>
      </div>
      <div id="appointmentDetails">
        <!-- Details will be populated here -->
      </div>
    </div>
  </div>


    <script>
  // Load appointments passed from backend
  window.appointments = <%- JSON.stringify(appointments) %>;
    

   class AppointmentManager {
  constructor() {
    this.appointments = window.appointments || [];
    this.filteredAppointments = [...this.appointments];
    this.currentFilter = 'all';
    this.currentPage = 1;
    this.itemsPerPage = 10;
    this.searchTerm = '';

    this.updateDisplay();
    this.updateStatistics();

    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('appointmentsTableContainer').style.display = 'block';
    document.getElementById('paginationContainer').style.display = 'flex';

    this.bindEvents();
  }

        initializeData() {
      // Use server-provided data
      this.appointments = serverAppointments || [];
      this.filteredAppointments = [...this.appointments];
      this.updateDisplay();
      this.updateStatistics();
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('appointmentsTableContainer').style.display = 'block';
      document.getElementById('paginationContainer').style.display = 'flex';
    }


      bindEvents() {
        // Search functionality
        document.getElementById('searchInput').addEventListener('input', (e) => {
          this.searchTerm = e.target.value.toLowerCase();
          this.applyFilters();
        });

        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
          const modal = document.getElementById('appointmentModal');
          if (e.target === modal) {
            this.closeModal();
          }
        });
      }

      filterStatus(status) {
        this.currentFilter = status;
        this.currentPage = 1;
        
        // Update active filter button
        document.querySelectorAll('.filters button').forEach(btn => {
          btn.classList.remove('active');
        });
        document.getElementById(`filter-${status}`).classList.add('active');
        
        this.applyFilters();
        this.showNotification(`Filtered by: ${status === 'all' ? 'All Appointments' : status}`, 'info');
      }

      applyFilters() {
        let filtered = [...this.appointments];

        // Apply status filter
        if (this.currentFilter !== 'all') {
          filtered = filtered.filter(apt => apt.status === this.currentFilter);
        }

        // Apply search filter
        if (this.searchTerm) {
          filtered = filtered.filter(apt => 
            apt.clientName.toLowerCase().includes(this.searchTerm) ||
            apt.id.toLowerCase().includes(this.searchTerm) ||
            apt.service.toLowerCase().includes(this.searchTerm)
          );
        }

        this.filteredAppointments = filtered;
        this.updateDisplay();
      }

      updateDisplay() {
  const tbody = document.getElementById('appointmentsTableBody');
  const startIndex = (this.currentPage - 1) * this.itemsPerPage;
  const endIndex = startIndex + this.itemsPerPage;
  const pageAppointments = this.filteredAppointments.slice(startIndex, endIndex);

  if (pageAppointments.length === 0) {
    document.getElementById('appointmentsTableContainer').style.display = 'none';
    document.getElementById('emptyState').style.display = 'block';
    document.getElementById('paginationContainer').style.display = 'none';
    return;
  }

  document.getElementById('appointmentsTableContainer').style.display = 'block';
  document.getElementById('emptyState').style.display = 'none';
  document.getElementById('paginationContainer').style.display = 'flex';

  tbody.innerHTML = pageAppointments.map(apt => `
    <tr>
      <td><strong>${apt.id}</strong></td>
      <td>
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <i class="fas fa-user-circle" style="color: #8aac7c;"></i>
          ${apt.clientName}
        </div>
      </td>
      <td>
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <i class="fas fa-calendar" style="color: #8aac7c;"></i>
          ${new Date(apt.date).toLocaleDateString()}
        </div>
      </td>
      <td>
        <div style="display: flex; align-items: center; gap: 0.5rem;">
          <i class="fas fa-clock" style="color: #8aac7c;"></i>
          ${apt.time}
        </div>
      </td>
      <td>
        <span style="text-transform: capitalize; font-weight: 600;">
          ${this.getServiceIcon(apt.service)} ${apt.service}
        </span>
      </td>
      <td>
        <span class="status-badge status-${apt.status}">
          ${this.getStatusIcon(apt.status)} ${apt.status}
        </span>
      </td>
            <td>
          <div class="action-buttons">
            <button class="btn-action btn-view" onclick="appointmentManager.viewAppointment('${apt.id}')">
              <i class="fas fa-eye"></i> View
            </button>
            ${apt.status === 'pending' ? `
              <button class="btn-action btn-approve" onclick="updateStatus(${apt.id}, 'approved')">
                <i class="fas fa-check"></i> Approve
              </button>
              <button class="btn-action btn-reject" onclick="updateStatus(${apt.id}, 'cancelled')">
                <i class="fas fa-times"></i> Reject
              </button>
            ` : ''}
          </div>
        </td>

    </tr>
  `).join('');

  this.updatePagination();
  document.getElementById('appointmentCount').textContent = 
    `Showing ${startIndex + 1}-${Math.min(endIndex, this.filteredAppointments.length)} of ${this.filteredAppointments.length}`;
}


      getServiceIcon(service) {
        const icons = {
          burial: 'üèõÔ∏è',
          columbarium: 'üè∫',
          consultation: 'üí¨',
          memorial: 'üåπ',
          maintenance: 'üîß'
        };
        return icons[service] || 'üìã';
      }

      getStatusIcon(status) {
        const icons = {
          pending: '‚è≥',
          approved: '‚úÖ',
          ongoing: 'üîÑ',
          completed: '‚úÖ',
          cancelled: '‚ùå'
        };
        return icons[status] || 'üìã';
      }

      updatePagination() {
        const totalPages = Math.ceil(this.filteredAppointments.length / this.itemsPerPage);
        document.getElementById('pageInfo').textContent = `Page ${this.currentPage} of ${totalPages}`;
        
        document.getElementById('prevBtn').disabled = this.currentPage === 1;
        document.getElementById('nextBtn').disabled = this.currentPage === totalPages;
      }

      updateStatistics() {
        const stats = {
          total: this.appointments.length,
          pending: this.appointments.filter(apt => apt.status === 'pending').length,
          approved: this.appointments.filter(apt => apt.status === 'approved').length,
          ongoing: this.appointments.filter(apt => apt.status === 'ongoing').length
        };

        // Animate numbers
        this.animateNumber('totalAppointments', stats.total);
        this.animateNumber('pendingCount', stats.pending);
        this.animateNumber('approvedCount', stats.approved);
        this.animateNumber('ongoingCount', stats.ongoing);
      }

      animateNumber(elementId, target) {
        const element = document.getElementById(elementId);
        let current = 0;
        const increment = target / 30;
        const timer = setInterval(() => {
          current += increment;
          if (current >= target) {
            current = target;
            clearInterval(timer);
          }
          element.textContent = Math.floor(current);
        }, 50);
      }

      changePage(direction) {
        const totalPages = Math.ceil(this.filteredAppointments.length / this.itemsPerPage);
        
        if (direction === 'prev' && this.currentPage > 1) {
          this.currentPage--;
        } else if (direction === 'next' && this.currentPage < totalPages) {
          this.currentPage++;
        }
        
        this.updateDisplay();
      }


      viewAppointment(id) {
        const appointment = this.appointments.find(apt => apt.id === id);
        if (!appointment) return;

        const detailsHtml = `
          <div style="display: grid; gap: 1rem;">
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
              <div>
                <strong>Appointment ID:</strong><br>
                <span style="color: #8aac7c; font-weight: 600;">${appointment.id}</span>
              </div>
              <div>
                <strong>Status:</strong><br>
                <span class="status-badge status-${appointment.status}">
                  ${this.getStatusIcon(appointment.status)} ${appointment.status}
                </span>
              </div>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
              <div>
                <strong>Client Name:</strong><br>
                <span>${appointment.clientName}</span>
              </div>
              <div>
                <strong>Phone:</strong><br>
                <span>${appointment.phone}</span>
              </div>
            </div>
            
            <div>
              <strong>Email:</strong><br>
              <span>${appointment.email}</span>
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 1rem;">
              <div>
                <strong>Date:</strong><br>
                <span>${new Date(appointment.date).toLocaleDateString()}</span>
              </div>
              <div>
                <strong>Time:</strong><br>
                <span>${appointment.time}</span>
              </div>
            </div>
            
            <div>
              <strong>Service Type:</strong><br>
              <span style="text-transform: capitalize;">${this.getServiceIcon(appointment.service)} ${appointment.service}</span>
            </div>
            
            <div>
              <strong>Notes:</strong><br>
              <span>${appointment.notes}</span>
            </div>
            
            <div>
              <strong>Created:</strong><br>
              <span>${appointment.createdAt.toLocaleDateString()} at ${appointment.createdAt.toLocaleTimeString()}</span>
            </div>
          </div>
        `;

        document.getElementById('appointmentDetails').innerHTML = detailsHtml;
        document.getElementById('appointmentModal').style.display = 'block';
      }

      editAppointment(id) {
        this.showNotification(`Edit functionality for appointment ${id} - Coming soon!`, 'info');
      }

      deleteAppointment(id) {
        if (confirm(`Are you sure you want to delete appointment ${id}?`)) {
          this.appointments = this.appointments.filter(apt => apt.id !== id);
          this.applyFilters();
          this.updateStatistics();
          this.showNotification(`Appointment ${id} deleted successfully!`, 'success');
        }
      }

      closeModal() {
        document.getElementById('appointmentModal').style.display = 'none';
      }

      exportAppointments() {
        this.showNotification('Exporting appointments to CSV...', 'info');
        
        // Simulate export
        setTimeout(() => {
          this.showNotification('Appointments exported successfully!', 'success');
        }, 2000);
      }

      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
          ${message}
        `;
        
        Object.assign(notification.style, {
          position: 'fixed',
          top: '100px',
          right: '20px',
          padding: '1rem 1.5rem',
          borderRadius: '10px',
          color: 'white',
          fontWeight: '600',
          zIndex: '9999',
          animation: 'slideInRight 0.3s ease',
          background: type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8',
          maxWidth: '350px',
          wordWrap: 'break-word',
          boxShadow: '0 4px 20px rgba(0,0,0,0.2)'
        });
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.animation = 'slideOutRight 0.3s ease';
          setTimeout(() => notification.remove(), 300);
        }, 4000);
      }
    }

          // Global functions for onclick handlers
      let appointmentManager;

    function filterStatus(status) {
      appointmentManager.filterStatus(status);
    }

    function changePage(direction) {
      appointmentManager.changePage(direction);
    }

    function exportAppointments() {
      appointmentManager.exportAppointments();
    }

    function closeModal() {
      appointmentManager.closeModal();
    }

              function updateStatus(id, status) {
      fetch(`/adminviewapp/${status === 'approved' ? 'approve' : 'reject'}/${id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ remarks: '' }) // send remarks if needed
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          // Use loose equality to match number/string ID
          const apt = appointmentManager.appointments.find(a => a.id == id);
          if (apt) {
            apt.status = status;
            appointmentManager.applyFilters(); // refresh table
            appointmentManager.updateStatistics();
            appointmentManager.showNotification(`Appointment ${id} marked as ${status}`, 'success');
          }
        } else {
          alert('Failed to update status');
        }
      })
      .catch(err => {
        console.error(err);
        alert('Error updating status');
      });
      }





    // Add CSS animations for notifications
    const style = document.createElement('style');
    style.textContent = `
      @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
      @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
      }
    `;
    document.head.appendChild(style);

    document.addEventListener('DOMContentLoaded', () => {
      // Convert string dates to Date objects
      window.appointments.forEach(apt => apt.createdAt = new Date(apt.createdAt));

      // Instantiate the manager
      appointmentManager = new AppointmentManager();
    });
  </script>
</body>
</html>