<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>View Appointments | Everlasting Peace Memorial Park</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="stylesheet" href="/stylesheets/admin.css" />
  <link rel="stylesheet" href="/stylesheets/adminviewapp.css">
  <script src="/JS/hamburger-menu.js" defer></script>
  <style>
    /* Minimal styles for the notify modal (if you want extra styling add to your CSS file) */
    .modal { display: none; position: fixed; z-index: 999; left:0; top:0; width:100%; height:100%; overflow:auto; background: rgba(0,0,0,0.4); }
    .modal-content { background:#fff; margin:8% auto; padding:20px; border-radius:8px; width:90%; max-width:520px; box-shadow:0 8px 30px rgba(0,0,0,0.2); }
    .modal-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:12px; }
    .modal-header h3 { margin:0; }
    .close { cursor:pointer; font-size:22px; color:#333; }
    .btn-action { padding:8px 10px; border:none; border-radius:6px; cursor:pointer; font-weight:600; }
    .btn-approve { background:#28a745; color:#fff; }
    .btn-reject { background:#dc3545; color:#fff; }
    .btn-notify { background:#17a2b8; color:#fff; }
    .action-buttons { display:flex; gap:6px; flex-wrap:wrap; }
    .status-badge { padding:6px 8px; border-radius:6px; color:#fff; font-weight:600; text-transform:capitalize; }
    .status-pending { background:#f0ad4e; }
    .status-approved { background:#28a745; }
    .status-ongoing { background:#007bff; }
    .status-cancelled { background:#6c757d; }
  </style>
</head>
<body>
  <!-- reusable topbar -->
  <%- include('partials/admin/topbar', { activePage: 'viewAppointments' }) %>
  <script>
    // alias legacy hamburger id to new sidebarToggle so older scripts keep working
    document.addEventListener('DOMContentLoaded', () => {
      const hb = document.getElementById('hamburger-btn');
      const st = document.getElementById('sidebarToggle');
      if (hb && st && !hb.dataset.mapped) {
        hb.addEventListener('click', () => st.click());
        hb.dataset.mapped = 'true';
      }
    });
  </script>

  <main class="admin-main">
    <%- include('partials/admin/sidebar', { activePage: 'viewAppointments' }) %>

    <section class="content">
      <div class="content-header">
        <h2>All Bookings</h2>
        <div class="search-controls">
          <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Search appointments..." id="searchInput">
          </div>
        </div>
      </div>

      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon">üìä</div>
          <div class="stat-number" id="totalAppointments">0</div>
          <div class="stat-label">Total Bookings</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">‚è≥</div>
          <div class="stat-number" id="pendingCount">0</div>
          <div class="stat-label">Pending</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">‚úÖ</div>
          <div class="stat-number" id="approvedCount">0</div>
          <div class="stat-label">Approved</div>
        </div>
        <div class="stat-card">
          <div class="stat-icon">üîÑ</div>
          <div class="stat-number" id="ongoingCount">0</div>
          <div class="stat-label">Ongoing</div>
        </div>
      </div>

      <div class="appointments-container">
        <div class="table-header">
          <h3><i class="fas fa-calendar-alt"></i> Bookings </h3>
          <span id="appointmentCount">Loading...</span>
        </div>

        <div id="loadingState" class="loading">
          <div class="spinner"></div>
        </div>

        <div id="appointmentsTableContainer">
          <table class="appointments-table">
            <thead>
              <tr>
                <th>i> ID</th>
                <th>Client Name</th>
                <th>Date</th>
                <th>Time</th>
                <th><i class="fas fa-cog"></i> Service</th>
                <th><i class="fas fa-info-circle"></i> Status</th>
                <th><i class="fas fa-tools"></i> Actions</th>
              </tr>
            </thead>
            <tbody id="appointmentsTableBody">
            </tbody>
          </table>
        </div>

        <div id="emptyState" class="empty-state" style="display: none;">
          <i class="fas fa-calendar-times"></i>
          <h3>No Bookings Found</h3>
          <p>No bookings match your current filter criteria.</p>
        </div>

        <div class="pagination" id="paginationContainer" style="display: none;">
          <button onclick="changePage('prev')" id="prevBtn">
            <i class="fas fa-chevron-left"></i> Previous
          </button>
          <span id="pageInfo">Page 1 of 1</span>
          <button onclick="changePage('next')" id="nextBtn">
            Next <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      </div>
    </section>
  </main>

  <!-- Appointment Details Modal -->
  <div id="appointmentModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-info-circle"></i> Bookings Details</h3>
        <span class="close" onclick="closeModal()">&times;</span>
      </div>
      <div id="appointmentDetails"></div>
    </div>
  </div>

  <!-- Notify Modal (Admin types custom message + optional email) -->
  <div id="notifyModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-envelope"></i> Send Notification</h3>
        <span class="close" onclick="closeNotifyModal()">&times;</span>
      </div>
      <div>
        <input 
          type="email" 
          id="notifyEmail" 
          placeholder="Enter recipient email (optional or override client email)" 
          style="width:100%; padding:10px; border-radius:6px; margin-bottom:10px;"
        >
        <textarea 
          id="notifyMessage" 
          rows="5" 
          placeholder="Enter message to user (e.g. 'Please come at 9:00 AM.')" 
          style="width:100%; padding:10px; border-radius:6px;"
        ></textarea>
        <div style="text-align:right; margin-top:12px;">
          <button class="btn-action btn-approve" onclick="sendNotificationMessage()">Send</button>
          <button class="btn-action btn-reject" onclick="closeNotifyModal()">Cancel</button>
        </div>
      </div>
    </div>
  </div>

<script>
  // appointments passed from server (safely default to empty array if undefined)
  <% var __appts = (typeof appointments !== 'undefined') ? appointments : []; %>
  window.appointments = <%- JSON.stringify(__appts) %>;

  class AppointmentManager {
    constructor() {
      this.appointments = window.appointments || [];
      this.filteredAppointments = [...this.appointments];
      this.currentFilter = 'all';
      this.currentPage = 1;
      this.itemsPerPage = 10;
      this.searchTerm = '';
      this.updateDisplay();
      this.updateStatistics();
      document.getElementById('loadingState').style.display = 'none';
      document.getElementById('appointmentsTableContainer').style.display = 'block';
      document.getElementById('paginationContainer').style.display = 'flex';
      this.bindEvents();
    }

    bindEvents() {
      document.getElementById('searchInput').addEventListener('input', (e) => {
        this.searchTerm = e.target.value.toLowerCase();
        this.applyFilters();
      });

      window.addEventListener('click', (e) => {
        const modal = document.getElementById('appointmentModal');
        if (e.target === modal) this.closeModal();
      });
    }

    filterStatus(status) {
      this.currentFilter = status;
      this.currentPage = 1;
      document.querySelectorAll('.filters button').forEach(btn => btn.classList.remove('active'));
      const btn = document.getElementById(`filter-${status}`);
      if (btn) btn.classList.add('active');
      this.applyFilters();
      this.showNotification(`Filtered by: ${status === 'all' ? 'All Appointments' : status}`, 'info');
    }

    applyFilters() {
      let filtered = [...this.appointments];
      if (this.currentFilter !== 'all') filtered = filtered.filter(apt => apt.status === this.currentFilter);
      if (this.searchTerm)
        filtered = filtered.filter(apt =>
          (apt.clientName || '').toLowerCase().includes(this.searchTerm) ||
          (''+apt.id).toLowerCase().includes(this.searchTerm) ||
          (apt.service || '').toLowerCase().includes(this.searchTerm)
        );
      this.filteredAppointments = filtered;
      this.currentPage = 1;
      this.updateDisplay();
    }

    updateDisplay() {
      const tbody = document.getElementById('appointmentsTableBody');
      const startIndex = (this.currentPage - 1) * this.itemsPerPage;
      const endIndex = startIndex + this.itemsPerPage;
      const pageAppointments = this.filteredAppointments.slice(startIndex, endIndex);

      if (pageAppointments.length === 0) {
        document.getElementById('appointmentsTableContainer').style.display = 'none';
        document.getElementById('emptyState').style.display = 'block';
        document.getElementById('paginationContainer').style.display = 'none';
        return;
      }

      document.getElementById('appointmentsTableContainer').style.display = 'block';
      document.getElementById('emptyState').style.display = 'none';
      document.getElementById('paginationContainer').style.display = 'flex';

      tbody.innerHTML = pageAppointments.map(apt => {
        const statusClass = `status-${apt.status}`;
        return `
        <tr>
          <td><strong>${apt.id}</strong></td>
          <td>${apt.clientName || ''}</td>
          <td>${apt.date ? new Date(apt.date).toLocaleDateString() : ''}</td>
          <td>${apt.time || ''}</td>
          <td>${apt.service || ''}</td>
          <td><span class="status-badge ${statusClass}">${apt.status}</span></td>
          <td>
            <div class="action-buttons">
              <button class="btn-action btn-view" onclick="appointmentManager.viewAppointment('${apt.id}')">
                <i class="fas fa-eye"></i> View
              </button>
              ${apt.status === 'pending' ? `
                <button class="btn-action btn-approve" onclick="updateStatus(${apt.id}, 'approved')">
                  <i class="fas fa-check"></i> Approve
                </button>
                <button class="btn-action btn-reject" onclick="updateStatus(${apt.id}, 'cancelled')">
                  <i class="fas fa-times"></i> Reject
                </button>
                <button class="btn-action btn-notify" onclick="openNotifyModal(${apt.id})">
                  <i class="fas fa-bell"></i> Notify
                </button>` : `
                <button class="btn-action btn-notify" onclick="openNotifyModal(${apt.id})">
                  <i class="fas fa-bell"></i> Notify
                </button>`}
            </div>
          </td>
        </tr>`;
      }).join('');
      this.updatePagination();
      document.getElementById('appointmentCount').textContent =
        `Showing ${startIndex + 1}-${Math.min(endIndex, this.filteredAppointments.length)} of ${this.filteredAppointments.length}`;
    }

    changePage(direction) {
      const totalPages = Math.ceil(this.filteredAppointments.length / this.itemsPerPage) || 1;
      if (direction === 'next' && this.currentPage < totalPages) {
        this.currentPage++;
      } else if (direction === 'prev' && this.currentPage > 1) {
        this.currentPage--;
      }
      this.updateDisplay();
    }

    viewAppointment(id) {
      const appointment = this.appointments.find(apt => apt.id == id);
      if (!appointment) return;

      const bookingInfo = appointment.booking
        ? `
          <hr>
          <h4><i class="fas fa-book"></i> Booking Details</h4>
          <p><strong>Plot Number:</strong> ${appointment.booking.plot_number || 'N/A'}</p>
          <p><strong>Location:</strong> ${appointment.booking.location || 'N/A'}</p>
          <p><strong>Type:</strong> ${appointment.booking.type || 'N/A'}</p>
          <p><strong>Price:</strong> ‚Ç±${appointment.booking.price?.toLocaleString() || '0.00'}</p>`
        : `<hr><p><em>No booking details found for this appointment.</em></p>`;

      const detailsHtml = `
        <div style="display: grid; gap: 1rem;">
          <p><strong>Appointment ID:</strong> ${appointment.id}</p>
          <p><strong>Client Name:</strong> ${appointment.clientName}</p>
          <p><strong>Email:</strong> ${appointment.email || 'N/A'}</p>
          <p><strong>Phone:</strong> ${appointment.phone || 'N/A'}</p>
          <p><strong>Date:</strong> ${appointment.date ? new Date(appointment.date).toLocaleDateString() : 'N/A'}</p>
          <p><strong>Time:</strong> ${appointment.time || 'N/A'}</p>
          <p><strong>Service:</strong> ${appointment.service || 'N/A'}</p>
          <p><strong>Status:</strong> ${appointment.status}</p>
          ${bookingInfo}
        </div>`;

      document.getElementById('appointmentDetails').innerHTML = detailsHtml;
      document.getElementById('appointmentModal').style.display = 'block';
    }

    updatePagination() {
      const totalPages = Math.ceil(this.filteredAppointments.length / this.itemsPerPage) || 1;
      document.getElementById('pageInfo').textContent = `Page ${this.currentPage} of ${totalPages}`;
      document.getElementById('prevBtn').disabled = this.currentPage === 1;
      document.getElementById('nextBtn').disabled = this.currentPage === totalPages;
    }

    updateStatistics() {
      const stats = {
        total: this.appointments.length,
        pending: this.appointments.filter(apt => apt.status === 'pending').length,
        approved: this.appointments.filter(apt => apt.status === 'approved').length,
        ongoing: this.appointments.filter(apt => apt.status === 'ongoing').length
      };
      this.animateNumber('totalAppointments', stats.total);
      this.animateNumber('pendingCount', stats.pending);
      this.animateNumber('approvedCount', stats.approved);
      this.animateNumber('ongoingCount', stats.ongoing);
    }

    animateNumber(id, target) {
      const el = document.getElementById(id);
      let num = 0;
      const step = Math.max(1, target / 30);
      const timer = setInterval(() => {
        num += step;
        if (num >= target) {
          num = target;
          clearInterval(timer);
        }
        el.textContent = Math.floor(num);
      }, 20);
    }

    closeModal() {
      document.getElementById('appointmentModal').style.display = 'none';
    }

    showNotification(msg, type = 'info') {
      const n = document.createElement('div');
      n.className = `notification ${type}`;
      n.innerHTML = `<i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i> ${msg}`;
      Object.assign(n.style, {
        position: 'fixed', top: '100px', right: '20px', padding: '1rem 1.5rem',
        borderRadius: '10px', color: 'white', fontWeight: '600', zIndex: '9999',
        animation: 'slideInRight 0.2s ease', background: type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#17a2b8'
      });
      document.body.appendChild(n);
      setTimeout(() => { n.style.opacity = '0'; setTimeout(() => n.remove(), 300); }, 3500);
    }
  }

  // GLOBAL INSTANCE
  let appointmentManager;
  function filterStatus(s){appointmentManager.filterStatus(s);}
  function changePage(d){appointmentManager.changePage(d);}
  function closeModal(){appointmentManager.closeModal();}

  // ---- Helpers for Admin actions (calls server endpoints) ----
  async function updateStatus(bookingId, newStatus) {
    try {
      const endpoint = newStatus === 'approved' ? `/adminviewapp/approve/${bookingId}` : `/adminviewapp/reject/${bookingId}`;
      const res = await fetch(endpoint, { method: 'POST', headers: { 'Content-Type':'application/json' } });
      const data = await res.json();
      if (data.success) {
        const idx = appointmentManager.appointments.findIndex(a => (''+a.id) === (''+bookingId));
        if (idx !== -1) {
          appointmentManager.appointments[idx].status = newStatus;
          appointmentManager.applyFilters();
          appointmentManager.showNotification(`Booking ${newStatus}`, 'success');
        } else {
          location.reload();
        }
      } else {
        appointmentManager.showNotification('Failed to update status', 'error');
      }
    } catch (err) {
      console.error('Error updating status:', err);
      appointmentManager.showNotification('Server error', 'error');
    }
  }

  // Notify modal logic
  let currentBookingIdForNotify = null;
  function openNotifyModal(bookingId) {
    currentBookingIdForNotify = bookingId;
    document.getElementById('notifyEmail').value = '';
    document.getElementById('notifyMessage').value = '';
    document.getElementById('notifyModal').style.display = 'block';
  }
  function closeNotifyModal() {
    document.getElementById('notifyModal').style.display = 'none';
  }

  async function sendNotificationMessage() {
    const message = document.getElementById('notifyMessage').value.trim();
    const email = document.getElementById('notifyEmail').value.trim();
    if (!message) return alert('Please enter a message.');
    try {
      const res = await fetch(`/adminviewapp/notify/${currentBookingIdForNotify}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message, email })
      });
      const data = await res.json();
      if (data.success) {
        appointmentManager.showNotification('Notification sent', 'success');
        closeNotifyModal();
      } else {
        appointmentManager.showNotification('Failed to send notification', 'error');
      }
    } catch (err) {
      console.error('Error sending notification:', err);
      appointmentManager.showNotification('Server error', 'error');
    }
  }

  // init
  document.addEventListener('DOMContentLoaded', () => {
    window.appointments.forEach(a => { if (a.createdAt) a.createdAt = new Date(a.createdAt); });
    appointmentManager = new AppointmentManager();
  });

</script>
</body>
</html>
