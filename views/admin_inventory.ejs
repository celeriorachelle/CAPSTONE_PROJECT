<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Plot Inventory | Everlasting Peace Memorial Park</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="stylesheet" href="/stylesheets/admin_inventory.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.css" />
</head>

<body>
  <%- include('./partials/admin/topbar', { activePage: 'inventory' }) %>

  <main class="admin-main">
    <%- include('./partials/admin/sidebar', { activePage: 'inventory' }) %>

    <section class="content">
      <div class="content-header">
        <h2><i class="fas fa-boxes"></i> Plot Inventory</h2>
        <div class="header-actions">
          <div class="search-bar">
            <i class="fas fa-search"></i>
            <input type="text" id="searchInput" placeholder="Search inventory...">
          </div>
          <button onclick="openPopup(false)" class="btn-action btn-add">
            <i class="fas fa-plus"></i> Add Plot
          </button>
        </div>
      </div>

      <div class="inventory-container">
        <div class="content-controls">
          <div class="table-header">
            <h3><i class="fas fa-list"></i> Inventory Overview</h3>
          </div>
          <div class="records-limit">
            <label for="recordsPerPage">Records per page:</label>
            <select id="recordsPerPage" class="filter-select">
              <option value="5">5</option>
              <option value="10" selected>10</option>
              <option value="25">25</option>
              <option value="50">50</option>
            </select>
          </div>
        </div>

        <div class="table-wrapper">
          <table class="inventory-table" id="inventoryTable">
            <thead>
              <tr>
                <th>Item Name</th>
                <th>Category</th>
                <th>Total Plots</th>
                <th>Available Plots</th>
                <th>Price</th>
                <th>Last Update</th>
                <th class="actions-column">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (plots.length === 0) { %>
                <tr class="empty-state-row">
                  <td colspan="7" class="empty-state">
                    <i class="fas fa-folder-open"></i>
                    <h3>No Plots Found</h3>
                  </td>
                </tr>
              <% } else { %>
                <% plots.forEach(plot => { %>
                  <tr>
                    <td><%= plot.item_name %></td>
                    <td><%= plot.category %></td>
                    <td><%= plot.total_plots %></td>
                    <td><%= plot.available_plots %></td>
                    <td>₱<%= plot.default_price.toLocaleString() %></td>
                    <td><%= plot.last_update ? new Date(plot.last_update).toLocaleString() : '-' %></td>
                    <td class="actions-column">
                      <div class="action-buttons">
                        <button type="button" class="btn-action btn-edit" onclick='openPopup(true, <%- JSON.stringify(plot) %>)'>
                          <i class="fas fa-edit"></i> Edit
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } %>
            </tbody>
          </table>

          <!-- Pagination Controls -->
          <div class="pagination">
            <button id="prevPage" class="btn-page" disabled>
              <i class="fas fa-chevron-left"></i> Previous
            </button>
            <div id="pageNumbers" class="page-numbers"></div>
            <button id="nextPage" class="btn-page">
              Next <i class="fas fa-chevron-right"></i>
            </button>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Popup: Plot List -->
  <div class="popup" id="plotPopup">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup()">&times;</span>
      <h2 id="popupTitle">Plot List</h2>
      <div id="plotListContainer">
        <div style="text-align:center; color:#888;">Select an item to view plots.</div>
      </div>
    </div>
  </div>

  <!-- Popup: Add Plot -->
  <div class="popup" id="addPlotPopup">
    <div class="popup-content">
      <span class="close-btn" onclick="closeAddPlotPopup()">&times;</span>
      <h2>Add New Plot</h2>
      <form id="addPlotForm">
        <label>Plot Number</label>
        <input type="text" name="plot_number" id="addPlotNumber" required>

        <label>Location</label>
        <select name="location" id="addPlotLocation" required>
          <option value="Veterans Memorial">Veterans Memorial</option>
          <option value="Memorial Chapel Level 1">Memorial Chapel Level 1</option>
          <option value="Memorial Chapel Level 2">Memorial Chapel Level 2</option>
          <option value="Memorial Chapel Level 3">Memorial Chapel Level 3</option>
          <option value="Serenity Columbarium">Serenity Columbarium</option>
          <option value="Heritage Gardens">Heritage Gardens</option>
          <option value="Family Estates">Family Estates</option>
        </select>

        <label>Type</label>
        <select name="type" id="addPlotType" required>
          <option value="Plot">Plot</option>
          <option value="Apartment">Apartment</option>
          <option value="Vault">Vault</option>
          <option value="Tomb">Tomb</option>
          <option value="Ossuary">Ossuary</option>
        </select>

        <label>Price</label>
        <input type="number" name="price" id="addPlotPrice" min="0" required>

        <div class="popup-actions">
          <button type="submit" class="save-btn">Add Plot</button>
          <button type="button" class="cancel-btn" onclick="closeAddPlotPopup()">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.all.min.js"></script>
  <script>
    let currentPage = 1;
    let filteredRows = [];
    let currentItemName = null;

    // Popup functions
    function openPopup(edit = false, plot = null) {
      document.getElementById("plotPopup").style.display = "flex";
      document.getElementById("popupTitle").innerText = "Plot List";
      const plotListContainer = document.getElementById("plotListContainer");
      plotListContainer.innerHTML = '<div style="text-align:center; color:#888;">Loading plots...</div>';
      if (edit && plot) {
        currentItemName = plot.item_name;
        // Fetch plots for this item name
        fetch(`/admin_inventory/plots/${encodeURIComponent(plot.item_name)}`)
          .then(res => res.json())
          .then(data => {
            if (data.plots && data.plots.length > 0) {
              let html = `<div style='max-height:350px;overflow:auto;'><table style='width:100%; border-collapse:separate; border-spacing:0; font-size:15px;'>`;
              html += `<tr style='background:#f8f9fa;'><th style='padding:8px 4px;text-align:center;'>Plot Number</th><th style='padding:8px 4px;text-align:center;'>Location</th><th style='padding:8px 4px;text-align:center;'>Type</th><th style='padding:8px 4px;text-align:center;'>Price</th><th style='padding:8px 4px;text-align:center;'>Status</th><th style='padding:8px 4px;text-align:center;'>Action</th></tr>`;
              data.plots.forEach(p => {
                html += `<tr style='border-bottom:1px solid #e9ecef;'>` +
                  `<td style='padding:6px 4px;text-align:center;'>${p.plot_number}</td>` +
                  `<td style='padding:6px 4px;text-align:center;'>${p.location}</td>` +
                  `<td style='padding:6px 4px;text-align:center;'>${p.type}</td>` +
                  `<td style='padding:6px 4px;text-align:center;'>₱${Number(p.price).toLocaleString()}</td>` +
                  `<td style='padding:6px 4px;text-align:center;'>${p.availability}</td>` +
                  `<td style='padding:6px 4px;text-align:center;'><button class='btn-action btn-delete' style='padding:4px 10px;font-size:13px;' onclick='deletePlot(${p.plot_id})'><i class="fas fa-trash"></i> Delete</button></td>` +
                  `</tr>`;
              });
              html += `</table></div>`;
              plotListContainer.innerHTML = html;
            } else {
              plotListContainer.innerHTML = '<div style="text-align:center; color:#888;">No plots found for this item.</div>';
            }
          })
          .catch(() => {
            plotListContainer.innerHTML = '<div style="text-align:center; color:#c00;">Failed to load plots.</div>';
          });
      } else {
        plotListContainer.innerHTML = '<div style="text-align:center; color:#888;">Select an item to view plots.</div>';
      }
    }

    function closePopup() {
      document.getElementById("plotPopup").style.display = "none";
    }

    // Add Plot Popup
    function openAddPlotPopup() {
      document.getElementById("addPlotPopup").style.display = "flex";
      document.getElementById("addPlotForm").reset();
    }
    function closeAddPlotPopup() {
      document.getElementById("addPlotPopup").style.display = "none";
    }

    // Helper: Update inventory table row counts
    function updateInventoryRowCounts(itemName) {
      fetch(`/admin_inventory/plots/${encodeURIComponent(itemName)}`)
        .then(res => res.json())
        .then(data => {
          const total = data.plots.length;
          const available = data.plots.filter(p => p.availability === 'available').length;
          // Find the row in the inventory table
          document.querySelectorAll('#inventoryTable tbody tr').forEach(row => {
            if (row.children[0] && row.children[0].textContent.trim() === itemName) {
              row.children[2].textContent = total;
              row.children[3].textContent = available;
            }
          });
        });
    }

    // Add Plot Form Submission
    document.getElementById('addPlotForm').addEventListener('submit', function(e) {
      e.preventDefault();
      const plot_number = document.getElementById('addPlotNumber').value;
      const location = document.getElementById('addPlotLocation').value;
      const type = document.getElementById('addPlotType').value;
      const price = document.getElementById('addPlotPrice').value;
      fetch('/admin_inventory/plot', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ plot_number, location, type, price })
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          Swal.fire({ icon: 'success', title: 'Success', text: 'Plot added successfully!' });
          closeAddPlotPopup();
          if (currentItemName) {
            openPopup(true, { item_name: currentItemName });
            updateInventoryRowCounts(currentItemName);
          }
        } else {
          Swal.fire({ icon: 'error', title: 'Failed', text: 'Failed to add plot: ' + (data.error || 'Unknown error') });
        }
      })
      .catch(() => Swal.fire({ icon: 'error', title: 'Failed', text: 'Failed to add plot.' }));
    });

    // Delete Plot
    function deletePlot(plot_id) {
      Swal.fire({
        title: 'Are you sure?',
        text: 'Do you want to delete this plot?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, delete it!'
      }).then((result) => {
        if (result.isConfirmed) {
          fetch(`/admin_inventory/plot/${plot_id}`, { method: 'DELETE' })
            .then(res => res.json())
            .then(data => {
              if (data.success) {
                Swal.fire({ icon: 'success', title: 'Deleted!', text: 'Plot deleted successfully!' });
                if (currentItemName) {
                  openPopup(true, { item_name: currentItemName });
                  updateInventoryRowCounts(currentItemName);
                }
              } else {
                Swal.fire({ icon: 'error', title: 'Failed', text: 'Failed to delete plot: ' + (data.error || 'Unknown error') });
              }
            })
            .catch(() => Swal.fire({ icon: 'error', title: 'Failed', text: 'Failed to delete plot.' }));
        }
      });
    }

    // Change Add Plot button to open the new popup
    document.querySelector('.btn-add').onclick = openAddPlotPopup;

    // Search and Filter
    const searchInput = document.getElementById('searchInput');
    const recordsPerPageSelect = document.getElementById('recordsPerPage');

    function filterTable() {
      const searchTerm = searchInput.value.toLowerCase();
      const allRows = Array.from(document.querySelectorAll('.inventory-table tbody tr'))
        .filter(row => !row.classList.contains('empty-state-row'));

      filteredRows = allRows.filter(row => {
        const rowText = row.textContent.toLowerCase();
        return rowText.includes(searchTerm);
      });

      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    }

    function updatePagination() {
      const itemsPerPage = parseInt(recordsPerPageSelect.value);
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      const pageNumbers = document.getElementById('pageNumbers');
      pageNumbers.innerHTML = '';

      let startPage = Math.max(1, currentPage - 2);
      let endPage = Math.min(totalPages, startPage + 4);
      
      if (endPage - startPage < 4) {
        startPage = Math.max(1, endPage - 4);
      }

      for (let i = startPage; i <= endPage; i++) {
        const btn = document.createElement('button');
        btn.textContent = i;
        btn.classList.toggle('active', i === currentPage);
        btn.onclick = () => {
          currentPage = i;
          updatePagination();
          displayCurrentPage();
        };
        pageNumbers.appendChild(btn);
      }

      document.getElementById('prevPage').disabled = currentPage === 1;
      document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;
    }

    function displayCurrentPage() {
      const itemsPerPage = parseInt(recordsPerPageSelect.value);
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      const pageRows = filteredRows.slice(start, end);

      document.querySelectorAll('.inventory-table tbody tr').forEach(row => {
        if (!row.classList.contains('empty-state-row')) {
          row.style.display = 'none';
        }
      });

      pageRows.forEach(row => row.style.display = '');

      const emptyState = document.querySelector('.empty-state-row');
      if (emptyState) {
        emptyState.style.display = filteredRows.length === 0 ? '' : 'none';
      }
    }

    // Event Listeners
    searchInput.addEventListener('keyup', filterTable);
    recordsPerPageSelect.addEventListener('change', () => {
      currentPage = 1;
      updatePagination();
      displayCurrentPage();
    });

    document.getElementById('prevPage').addEventListener('click', () => {
      if (currentPage > 1) {
        currentPage--;
        updatePagination();
        displayCurrentPage();
      }
    });

    document.getElementById('nextPage').addEventListener('click', () => {
      const itemsPerPage = parseInt(recordsPerPageSelect.value);
      const totalPages = Math.ceil(filteredRows.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        updatePagination();
        displayCurrentPage();
      }
    });

    // Initialize
    filterTable();
  </script>
</body>
</html>