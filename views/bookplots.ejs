<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Booking Form</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/stylesheets/bookplots.css">
</head>
<body>
  <div class="sidebar" id="sidebar">
    <div>
      <div class="sidebar-header">
        <h2>Everlasting Peace<br>Memorial Park Cemetery</h2>
      </div>
      <nav>
        <a href="/">Home</a>
        <a href="/book">Book</a>
        <a href="/viewbooking">View Bookings</a>
        <a href="/burialrecord">Booking Records</a>
        <a href="/support">Support</a>
        <a href="/">View Map</a>
      </nav>
    </div>
    <div class="sidebar-footer">
      &copy; 2025 Everlasting Peace
    </div>
  </div>

    <div class="main" id="main">
    <div class="topbar">
      <h1>Book Plots</h1>
      <div>ðŸ”” ðŸ‘¤</div>
    </div>

    <div class="main-content">
        <div class="left-panel">
            <div class="recommendations">
                <h3>Recommended Plots for You</h3>
                <table class="recommendations-table">
                    <thead>
                        <tr>
                            <th>Plot Type</th>
                            <th>Plot No.</th>
                            <th>Category</th>
                            <th>Price</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="recommendations-body">
                        <!-- Recommendations will be populated by JavaScript -->
                    </tbody>
                </table>
            </div>
        </div>

        <div class="right-panel">
            <div class="plot-header">
                <div class="plot-type-badge" id="categoryBadge">PLOT TYPE - SELECT CATEGORY</div>
                <div class="search-box">
                    <input type="text" placeholder="SEARCH" />
                </div>
            </div>

            <!-- Category Selection -->
            <div class="category-selector">
                <h4>Select Category:</h4>
                <div class="category-buttons" id="categoryButtons">
                    <!-- Category buttons will be generated dynamically -->
                </div>
                <div class="category-info" id="categoryInfo">
                    <p><strong>Select a category</strong> to view available plots</p>
                    <p>Total Plots: <span id="totalPlots">0</span> | Available: <span id="availablePlots">0</span></p>
                </div>
            </div>

            <div class="plot-grid" id="plotGrid">
                <!-- Plots will be generated by JavaScript -->
            </div>

            <!-- Plot List Table -->
            <div class="plot-list-section">
                <h4>All Plots in Category</h4>
                <div class="plot-table-container">
                    <table class="plot-table">
                        <thead>
                            <tr>
                                <th>Plot No.</th>
                                <th>Section</th>
                                <th>Size</th>
                                <th>Type</th>
                                <th>Price</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="plotTableBody">
                            <!-- Plot data will be populated by JavaScript -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
     <footer>
          <%- include('partials/footer') %>
    </footer>
    <!-- Modal for plot booking -->
    <div id="plotModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <h3 id="modalTitle">Plot Information</h3>
            <div class="plot-info" id="plotInfo">
                <!-- Plot information will be populated by JavaScript -->
            </div>
            <div class="modal-actions" id="modalActions">
                <!-- Action buttons will be populated by JavaScript -->
            </div>
        </div>
    </div>

    <!-- Tooltip -->
    <div class="tooltip" id="tooltip"></div>

    <script>
        // Get plot data from server
        const plotsFromServer = <%- JSON.stringify(plots || []) %>;
        const plotsByLocationFromServer = <%- JSON.stringify(plotsByLocation || {}) %>;
        
        // Transform database data to match frontend structure
        const plotsData = {};
        const categories = {};
        
        // Map database locations to frontend categories
        const locationMapping = {
            'Veterans Memorial': 'veterans_memorial',
            'Memorial Chapel & Administration - Level 1': 'memorial_chapel_l1',
            'Memorial Chapel & Administration - Level 2': 'memorial_chapel_l2',
            'Memorial Chapel & Administration - Level 3': 'memorial_chapel_l3',
            'Memorial Chapel & Administration - Level 4': 'memorial_chapel_l4',
            'Serenity Columbarium - A': 'serenity_columbarium_a',
            'Serenity Columbarium - B': 'serenity_columbarium_b',
            'Serenity Columbarium - C': 'serenity_columbarium_c',
            'Serenity Columbarium - D': 'serenity_columbarium_d',
            'Heritage Gardens - A': 'heritage_gardens_a',
            'Heritage Gardens - B': 'heritage_gardens_b',
            'Heritage Gardens - C': 'heritage_gardens_c',
            'Heritage Gardens - D': 'heritage_gardens_d',
            'Family Estates - A': 'family_estates_a',
            'Family Estates - B': 'family_estates_b',
            'Family Estates - C': 'family_estates_c',
            'Family Estates - D': 'family_estates_d'
        };

        // Initialize categories and plotsData
        Object.keys(locationMapping).forEach(location => {
            const categoryKey = locationMapping[location];
            plotsData[categoryKey] = [];
            categories[categoryKey] = {
                name: location,
                description: `Plots in ${location}`,
                totalPlots: 0,
                availablePlots: 0
            };
        });

        // Transform plots data
        plotsFromServer.forEach(plot => {
            const categoryKey = locationMapping[plot.location];
            if (categoryKey) {
                const transformedPlot = {
                    id: `P${plot.plot_id}`,
                    status: plot.status,
                    price: plot.price || 0,
                    section: plot.location.split(' - ')[1] || 'A',
                    plotNo: plot.plot_number.toString().padStart(3, '0'),
                    size: '2m Ã— 1.5m', // Default size, can be added to database later
                    features: `${plot.type} plot`,
                    deceased_firstName: plot.deceased_firstName,
                    deceased_lastName: plot.deceased_lastName,
                    birth_date: plot.birth_date,
                    death_date: plot.death_date,
                    type: plot.type
                };
                
                plotsData[categoryKey].push(transformedPlot);
                categories[categoryKey].totalPlots++;
                if (plot.status.toLowerCase() === 'available') {
                    categories[categoryKey].availablePlots++;
                }
            }
        });

        // Set default category to first available category with plots
        let currentCategory = Object.keys(plotsData).find(key => plotsData[key].length > 0) || 'heritage_gardens_a';

        // Generate category buttons dynamically
        function generateCategoryButtons() {
            const categoryButtonsContainer = document.getElementById('categoryButtons');
            categoryButtonsContainer.innerHTML = '';
            
            let isFirst = true;
            Object.keys(categories).forEach((categoryKey) => {
                if (categories[categoryKey].totalPlots > 0) {
                    const button = document.createElement('button');
                    button.className = `category-btn ${isFirst ? 'active' : ''}`;
                    button.setAttribute('data-category', categoryKey);
                    button.textContent = categories[categoryKey].name;
                    categoryButtonsContainer.appendChild(button);
                    
                    if (isFirst) {
                        currentCategory = categoryKey;
                        isFirst = false;
                    }
                }
            });
        }

        // Generate plot grid
        function generatePlotGrid() {
            const plotGrid = document.getElementById('plotGrid');
            const plots = plotsData[currentCategory] || [];
            
            plotGrid.innerHTML = '';
            
            plots.forEach(plot => {
                const plotElement = document.createElement('div');
                plotElement.className = `plot ${plot.status}`;
                plotElement.id = plot.id;
                plotElement.textContent = plot.status.toUpperCase();
                
                plotElement.addEventListener('mouseenter', (e) => showTooltip(e, plot));
                plotElement.addEventListener('mouseleave', hideTooltip);
                plotElement.addEventListener('click', () => openPlotModal(plot));
                
                plotGrid.appendChild(plotElement);
            });
        }

        // Generate plot table
        function generatePlotTable() {
            const plotTableBody = document.getElementById('plotTableBody');
            const plots = plotsData[currentCategory] || [];
            
            plotTableBody.innerHTML = '';
            
            plots.forEach(plot => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${plot.plotNo}</td>
                    <td>${plot.section}</td>
                    <td>${plot.size}</td>
                    <td>${plot.type || ''}</td>
                    <td>â‚±${plot.price.toLocaleString()}</td>
                    <td><span class="status-badge ${plot.status}">${plot.status}</span></td>
                    <td class="action-buttons">
                        ${plot.status === 'available' ? 
                            `<button class="btn-book" onclick="bookPlot('${plot.id}')">BOOK</button>
                             <button class="btn-reserve" onclick="reservePlot('${plot.id}')">RESERVE</button>` :
                            `<span class="unavailable">Not Available</span>`
                        }
                    </td>
                `;
                plotTableBody.appendChild(row);
            });
        }

        // Generate recommendations based on current category
        function generateRecommendations() {
            const recommendationsBody = document.getElementById('recommendations-body');
            
            // Get available plots from all categories
            let allAvailablePlots = [];
            Object.keys(plotsData).forEach(categoryKey => {
                const plots = plotsData[categoryKey].filter(plot => plot.status === 'available');
                plots.forEach(plot => {
                    plot.categoryName = categories[categoryKey].name;
                    plot.categoryKey = categoryKey;
                });
                allAvailablePlots = allAvailablePlots.concat(plots);
            });
            
            // Sort by price and take first 5
            allAvailablePlots.sort((a, b) => a.price - b.price);
            const topRecommendations = allAvailablePlots.slice(0, 5);
            
            recommendationsBody.innerHTML = '';
            
            topRecommendations.forEach(plot => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${plot.type || 'Plot'}</td>
                    <td>No. ${plot.plotNo}</td>
                    <td>${plot.categoryName}</td>
                    <td class="price">â‚±${plot.price.toLocaleString()}</td>
                    <td>Available</td>
                    <td class="action-buttons">
                        <button class="btn-book" onclick="bookPlot('${plot.id}')">BOOK NOW</button>
                        <button class="btn-reserve" onclick="reservePlot('${plot.id}')">RESERVE</button>
                    </td>
                `;
                recommendationsBody.appendChild(row);
            });
        }

        // Update category information
        function updateCategoryInfo() {
            const categoryInfo = categories[currentCategory];
            if (!categoryInfo) return;
            
            const categoryBadge = document.getElementById('categoryBadge');
            const categoryInfoDiv = document.getElementById('categoryInfo');
            
            categoryBadge.textContent = `PLOT TYPE - ${categoryInfo.name.toUpperCase()}`;
            categoryInfoDiv.innerHTML = `
                <p><strong>${categoryInfo.name}:</strong> ${categoryInfo.description}</p>
                <p>Total Plots: <span id="totalPlots">${categoryInfo.totalPlots}</span> | Available: <span id="availablePlots">${categoryInfo.availablePlots}</span></p>
            `;
        }

        // Switch category
        function switchCategory(categoryKey) {
            if (!categories[categoryKey]) {
                console.error(`Category ${categoryKey} not found`);
                return;
            }
            
            currentCategory = categoryKey;
            updateCategoryInfo();
            generatePlotGrid();
            generatePlotTable();
            generateRecommendations();
            
            // Update active button
            document.querySelectorAll('.category-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.getAttribute('data-category') === categoryKey) {
                    btn.classList.add('active');
                }
            });
        }

        // Tooltip functions
        function showTooltip(e, plot) {
            const tooltip = document.getElementById('tooltip');
            tooltip.innerHTML = `
                <strong>Plot ${plot.plotNo}</strong><br>
                Section: ${plot.section}<br>
                Status: ${plot.status}<br>
                Price: â‚±${plot.price.toLocaleString()}
            `;
            tooltip.classList.add('show');
            
            const rect = e.target.getBoundingClientRect();
            tooltip.style.left = (rect.left + rect.width / 2) + 'px';
            tooltip.style.top = (rect.top - 10) + 'px';
            tooltip.style.transform = 'translateX(-50%) translateY(-100%)';
        }

        function hideTooltip() {
            const tooltip = document.getElementById('tooltip');
            tooltip.classList.remove('show');
        }

        // Modal functions
        function openPlotModal(plot) {
            const modal = document.getElementById('plotModal');
            const modalTitle = document.getElementById('modalTitle');
            const plotInfo = document.getElementById('plotInfo');
            const modalActions = document.getElementById('modalActions');
            const categoryName = categories[currentCategory].name;
            
            modalTitle.textContent = `${categoryName} Plot ${plot.plotNo}`;
            
            let plotDetails = `
                <p><strong>Plot Number:</strong> ${plot.plotNo}</p>
                <p><strong>Section:</strong> ${plot.section}</p>
                <p><strong>Category:</strong> ${categoryName}</p>
                <p><strong>Price:</strong> â‚±${plot.price.toLocaleString()}</p>
                <p><strong>Status:</strong> ${plot.status}</p>
                <p><strong>Size:</strong> ${plot.size}</p>
                <p><strong>Features:</strong> ${plot.features}</p>
            `;
            
            if (plot.status === 'occupied' && (plot.deceased_firstName || plot.deceased_lastName)) {
                plotDetails += `
                    <hr>
                    <p><strong>Deceased:</strong> ${plot.deceased_firstName || ''} ${plot.deceased_lastName || ''}</p>
                `;
                if (plot.birth_date) {
                    plotDetails += `<p><strong>Birth Date:</strong> ${new Date(plot.birth_date).toLocaleDateString()}</p>`;
                }
                if (plot.death_date) {
                    plotDetails += `<p><strong>Death Date:</strong> ${new Date(plot.death_date).toLocaleDateString()}</p>`;
                }
            }
            
            plotInfo.innerHTML = plotDetails;
            
            if (plot.status === 'available') {
                modalActions.innerHTML = `
                    <button class="btn-book" onclick="bookPlot('${plot.id}')">BOOK NOW</button>
                    <button class="btn-reserve" onclick="reservePlot('${plot.id}')">RESERVE</button>
                `;
            } else {
                modalActions.innerHTML = `<p>This plot is not available for booking.</p>`;
            }
            
            modal.style.display = 'block';
        }

        function closeModal() {
            document.getElementById('plotModal').style.display = 'none';
        }

        // Booking functions
        function bookPlot(plotId) {
            const categoryName = categories[currentCategory].name;
            const plot = plotsData[currentCategory].find(p => p.id === plotId);
            
            if (plot && plot.status === 'available') {
                alert(`${categoryName} Plot ${plot.plotNo} has been booked successfully!`);
                // In a real application, this would make an API call to update the database
                // For now, just update the local data
                plot.status = 'occupied';
                categories[currentCategory].availablePlots--;
                
                // Regenerate all displays
                generatePlotGrid();
                generatePlotTable();
                generateRecommendations();
                updateCategoryInfo();
                closeModal();
            }
        }

        function reservePlot(plotId) {
            const categoryName = categories[currentCategory].name;
            const plot = plotsData[currentCategory].find(p => p.id === plotId);
            
            if (plot && plot.status === 'available') {
                alert(`${categoryName} Plot ${plot.plotNo} has been reserved successfully!`);
                // In a real application, this would make an API call to update the database
                plot.status = 'reserved';
                categories[currentCategory].availablePlots--;
                
                // Regenerate all displays
                generatePlotGrid();
                generatePlotTable();
                generateRecommendations();
                updateCategoryInfo();
                closeModal();
            }
        }

        // Search functionality
        function setupSearch() {
            const searchInput = document.querySelector('.search-box input');
            if (searchInput) {
                searchInput.addEventListener('input', function(e) {
                    const searchTerm = e.target.value.toLowerCase();
                    
                    // Filter plot grid
                    const plots = document.querySelectorAll('.plot');
                    plots.forEach(plot => {
                        const plotData = plotsData[currentCategory].find(p => p.id === plot.id);
                        if (plotData) {
                            const searchContent = `${plotData.plotNo} ${plotData.section} ${plotData.status}`.toLowerCase();
                            plot.style.display = searchContent.includes(searchTerm) ? 'flex' : 'none';
                        }
                    });
                    
                    // Filter plot table
                    const tableRows = document.querySelectorAll('#plotTableBody tr');
                    tableRows.forEach((row, index) => {
                        const plotData = plotsData[currentCategory][index];
                        if (plotData) {
                            const searchContent = `${plotData.plotNo} ${plotData.section} ${plotData.status}`.toLowerCase();
                            row.style.display = searchContent.includes(searchTerm) ? '' : 'none';
                        }
                    });
                });
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('plotModal');
            if (event.target == modal) {
                closeModal();
            }
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            generateCategoryButtons();
            generatePlotGrid();
            generatePlotTable();
            generateRecommendations();
            updateCategoryInfo();
            setupSearch();
            
            // Add event listeners for category buttons
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('category-btn')) {
                    const category = e.target.getAttribute('data-category');
                    if (category && categories[category]) {
                        switchCategory(category);
                    }
                }
            });
        });
    </script>
</body>
</html>