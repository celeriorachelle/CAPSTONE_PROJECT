<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Staff | Track Installments</title>
  <link rel="stylesheet" href="/stylesheets/staff_installments.css">
  <style>
    .due-soon { background-color: #fff3cd; }
    .overdue { background-color: #f8d7da; }
    .completed { background-color: #d4edda; } 
    .btn-remind {
      background-color: #17a2b8;
      color: white;
      border: none;
      padding: 8px 14px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }
    .btn-remind:hover { background-color: #526D82; }

    /* ===== Modal Styling ===== */
    .modal-backdrop {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.4);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 9999;
    }

    .modal {
      background: white;
      width: 600px;
      max-width: 95%;
      border-radius: 12px;
      padding: 22px;
      box-shadow: 0 10px 35px rgba(0,0,0,0.25);
      animation: fadeIn 0.25s ease-in-out;
      max-height: 90vh;
      overflow-y: auto;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }

    .modal header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 15px;
      border-bottom: 1px solid #eee;
      padding-bottom: 8px;
    }

    .modal h3 {
      margin: 0;
      font-size: 18px;
      color: #27374D;
    }

    .modal .close {
      cursor: pointer;
      font-weight: bold;
      font-size: 20px;
      color: #444;
    }

    .form-row {
      margin-bottom: 14px;
    }

    .form-row label {
      display: block;
      font-size: 13px;
      margin-bottom: 6px;
      color: #333;
      font-weight: 600;
    }

    .form-row input[type="text"],
    .form-row input[type="email"],
    .form-row textarea,
    .form-row select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 8px;
      font-size: 14px;
      font-family: Arial, sans-serif;
      resize: vertical;
    }

    textarea {
      min-height: 120px;
      max-height: 300px;
    }

    .modal .actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      margin-top: 12px;
    }

    .btn-primary {
      background: #27374D;
      color: white;
      border: none;
      padding: 10px 18px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }

    .btn-secondary {
      background: #e0e0e0;
      color: #333;
      border: none;
      padding: 10px 16px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 14px;
    }

    #messagePreview {
      border: 1px solid #ddd;
      padding: 10px;
      border-radius: 6px;
      max-height: 200px;
      overflow-y: auto;
      background: #fafafa;
      font-size: 13px;
    }

    /* Responsive Modal */
    @media (max-width: 600px) {
      .modal {
        width: 95%;
        padding: 15px;
      }
      .modal h3 {
        font-size: 16px;
      }
      .form-row label {
        font-size: 12px;
      }
    }

    #installmentTable tr.hidden { display: none; }
    .completed td {
  opacity: 0.85;
}
.completed td button {
  cursor: not-allowed;
}
/* ======= COMPLETED SECTION DESIGN ======= */
.divider-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
  margin: 18px 0;
}

.divider-line {
  flex: 1;
  height: 1px;
  border: none;
  background: linear-gradient(to right, transparent, #28a745, transparent);
}

.divider-text {
  background: #f1fff1;
  color: #198754;
  font-weight: 700;
  padding: 6px 16px;
  border-radius: 50px;
  font-size: 15px;
  box-shadow: 0 2px 6px rgba(40,167,69,0.2);
}

/* Completed rows with card effect */
.styled-completed {
  background: linear-gradient(145deg, #e9f8ee, #d4edda);
  border-radius: 10px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.styled-completed:hover {
  transform: scale(1.01);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.status-badge {
  background: #28a745;
  color: white;
  padding: 4px 10px;
  border-radius: 20px;
  font-size: 13px;
  font-weight: 600;
}


  </style>
</head>
<body>
  <div class="sidebar">
    <h2>Staff Panel</h2>
    <ul>
      <li><a href="/staff_dashboard">Dashboard</a></li>
      <li><a href="/staff_viewbookings">View Bookings</a></li>
      <li><a href="/maps">Cemetery Map</a></li>
      <li><a href="/staff_installments" class="active">Track Installments</a></li>
      <li><a href="/staff_checknotificationlogs">Notification Logs</a></li>
      <li><a href="/staff_viewpaymentreports">Payment Reports</a></li>
      <li><a href="/login/logout">Logout</a></li>
    </ul>
  </div>

  <div class="main">
    <header>
      <h1>Installment Tracking</h1>
      <input id="searchInput" type="text" placeholder="Search client name...">
    </header>

    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Down Payment By</th>
          <th>Amount</th>
          <th>Due Date</th>
          <th>Status</th>
          <th>Days Left</th>
          <th>Action</th>
        </tr>
      </thead>
<tbody id="installmentTable">
  <% if (installments.length === 0) { %>
    <tr><td colspan="7">No downpayment records found.</td></tr>
  <% } else { %>

    <!-- ðŸ”¹ ACTIVE / DUE / OVERDUE PAYMENTS -->
    <% const activeList = installments.filter(p => (p.display_status || p.status) !== 'Completed'); %>
    <% if (activeList.length > 0) { %>
      <% activeList.forEach(p => { %>
        <tr 
          class="<%= (p.display_status || p.status) === 'Completed' 
            ? 'completed' 
            : (p.days_left < 0 ? 'overdue' : (p.days_left <= 3 ? 'due-soon' : '')) %>" 
          data-payment-id="<%= p.id %>">

          <td><%= p.id %></td>
          <td><%= p.clientName %></td>
          <td title="Total: â‚±<%= Number(p.total_amount||0).toLocaleString() %> â€¢ Paid: â‚±<%= Number(p.total_paid||0).toLocaleString() %>">
            â‚±<%= Number(p.remaining || 0).toLocaleString() %>
          </td>
          <td><%= new Date(p.due_date).toLocaleDateString('en-US', { year:'numeric', month:'short', day:'2-digit' }) %></td>
          <td><%= p.display_status || p.status %></td>
          <td><%= p.days_left >= 0 ? p.days_left + ' days' : 'Overdue' %></td>
          <td>
            <button class="btn-remind" onclick="openRemindModal(<%= p.id %>)">Send Reminder</button>
            <!-- ðŸŸ¡ Warning (3 days left) -->
            <button class="btn-primary" style="background:#ffc107;" onclick="sendWarning(<%= p.id %>)">Final Warning</button>
            <!-- ðŸ”´ Final Warning (7 days overdue) -->
            <button class="btn-primary" style="background:#dc3545;" onclick="sendFinalWarning(<%= p.id %>)">Removed</button>
          </td>

        </tr>
      <% }) %>
    <% } else { %>
      <tr><td colspan="7">No active or overdue records found.</td></tr>
    <% } %>

    <!-- ðŸŒ¿ DIVIDER: COMPLETED PAYMENTS -->
    <% const completedList = installments.filter(p => (p.display_status || p.status) === 'Completed'); %>
    <% if (completedList.length > 0) { %>
      <!-- Fancy Divider -->
      <tr class="divider-row">
        <td colspan="7">
          <div class="divider-container">
            <hr class="divider-line">
            <span class="divider-text">âœ… Completed Payments</span>
            <hr class="divider-line">
          </div>
        </td>
      </tr>

    <% completedList.forEach(p => { %>
  <tr class="completed styled-completed" data-payment-id="<%= p.id %>">
    <td><%= p.id %></td>
    <td><%= p.clientName %></td>
    <td>â‚±<%= Number(p.total_paid || p.total_amount || 0).toLocaleString() %></td>
    <td><%= new Date(p.due_date).toLocaleDateString('en-US', { year:'numeric', month:'short', day:'2-digit' }) %></td>
    <td>
      <span class="status-badge">âœ” Completed</span>
    </td>
    <td>â€”</td>
    <td>
      <button class="btn-primary" style="background:#28a745;" onclick="openCompletedNotify(<%= p.id %>)">
        Notify User
      </button>
    </td>
  </tr>
<% }) %>

    <% } %>
  <% } %>
</tbody>

    </table>
  </div>
<!-- âœ… COMPLETED NOTIFICATION MODAL -->
<div id="completedBackdrop" class="modal-backdrop" role="dialog" aria-hidden="true">
  <div class="modal" role="document">
    <header>
      <h3>Send Completion Notification</h3>
      <span class="close" onclick="closeCompletedModal()">âœ•</span>
    </header>

    <div>
      <div class="form-row">
        <label>To (Email)</label>
        <input id="completedEmail" type="email" readonly>
      </div>

      <div class="form-row">
        <label>Subject</label>
        <input id="completedSubject" type="text" value="Congratulations! Your Installment Plan is Fully Paid">
      </div>

      <div class="form-row">
        <label>Message</label>
        <textarea id="completedBody" rows="6">
Dear [ClientName],

Congratulations! Your installment payment plan has been successfully completed. 
Thank you for your trust and timely payments.

Your account is now fully settled. Please keep this as confirmation.

Warm regards,
Everlasting Peace Memorial Park
        </textarea>
      </div>

      <div class="actions">
        <button class="btn-secondary" onclick="closeCompletedModal()">Cancel</button>
        <button class="btn-primary" onclick="sendCompletionEmail()">Send Email</button>
        <button class="btn-remind" style="background:#28a745;" onclick="sendCompletionSMS()">Send SMS</button>
      </div>
    </div>
  </div>
</div>

  <!-- Reminder Modal -->
  <div id="remindBackdrop" class="modal-backdrop" role="dialog" aria-hidden="true">
    <div class="modal" role="document" aria-labelledby="modalTitle">
      <header>
        <h3 id="modalTitle">Send Payment Reminder</h3>
        <span class="close" onclick="closeRemindModal()">âœ•</span>
      </header>

      <div>
        <div class="form-row">
          <label>Send Type</label>
          <select id="sendType">
            <option value="auto">Automatic (templated)</option>
            <option value="manual">Manual (edit message)</option>
          </select>
        </div>

        <div class="form-row">
          <label>To (email)</label>
          <input id="emailTo" type="email" readonly>
        </div>

        <div class="form-row">
          <label>Subject</label>
          <input id="emailSubject" type="text">
        </div>

        <div class="form-row">
          <label>Message (HTML allowed)</label>
          <textarea id="emailBody" rows="8"></textarea>
        </div>

        <div class="form-row">
          <label>Preview</label>
          <div id="messagePreview"></div>
        </div>

        <div class="actions">
          <button class="btn-secondary" onclick="closeRemindModal()">Cancel</button>
          <button class="btn-primary" id="sendEmailBtn" onclick="sendReminderFromModal()">Send Email</button>
          <!-- âœ… FIXED: Use currentPaymentId instead of undefined p.id -->
<button class="btn-remind" style="background:#28a745;" onclick="sendSMS(currentPaymentId, this)">Send SMS</button>
        </div>
      </div>
    </div>
  </div>
  

  <script>
    let currentCompletedId = null;

function openCompletedNotify(paymentId) {
  currentCompletedId = paymentId;
  fetch(`/staff_installments/${paymentId}`)
    .then(res => res.json())
    .then(data => {
      const client = data.payment;
      document.getElementById("completedEmail").value = client.email;
      document.getElementById("completedBody").value =
        `Dear ${client.name},\n\nCongratulations! Your installment payment plan has been successfully completed.\nThank you for your trust and timely payments.\n\nYour account is now fully settled.\n\nWarm regards,\nEverlasting Peace Memorial Park`;
      document.getElementById("completedBackdrop").style.display = "flex";
    })
    .catch(() => alert("Failed to load client info."));
}

function closeCompletedModal() {
  document.getElementById("completedBackdrop").style.display = "none";
  currentCompletedId = null;
}

function sendCompletionEmail() {
  const payload = {
    to: document.getElementById("completedEmail").value,
    subject: document.getElementById("completedSubject").value,
    message: document.getElementById("completedBody").value,
  };

  fetch(`/staff_installments/completed_notify/${currentCompletedId}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  })
    .then(res => res.json())
    .then(data => alert(data.message))
    .catch(() => alert("Failed to send email."));
}

function sendCompletionSMS() {
  if (!confirm("Send SMS completion notice to client?")) return;
  fetch(`/staff_installments/completed_sms/${currentCompletedId}`, { method: "POST" })
    .then(res => res.json())
    .then(data => alert(data.message || "SMS sent!"))
    .catch(() => alert("Failed to send SMS."));
}

function sendSMS(paymentId, btn) {
  if (!confirm("Send SMS reminder to client?")) return;
  if (btn) { btn.disabled = true; const original = btn.textContent; btn.textContent = "Sending..."; }
  fetch(`/staff_installments/sms/${paymentId}`, { method: "POST" })
    .then(res => res.json())
    .then(data => {
      alert(data.message || "SMS request sent.");
      // optional: console.log(data.gateway);
    })
    .catch(err => {
      console.error(err);
      alert("Error sending SMS. Check server logs and phone gateway.");
    })
    .finally(() => {
      if (btn) { btn.disabled = false; btn.textContent = original; }
    });
}

    // Search filter
    document.getElementById("searchInput").addEventListener("input", function() {
      const term = this.value.toLowerCase();
      document.querySelectorAll("#installmentTable tr").forEach(row => {
        const text = row.textContent.toLowerCase();
        row.style.display = text.includes(term) ? "" : "none";
      });
    });

    const backdrop = document.getElementById('remindBackdrop');
    let currentPaymentId = null;

    function openRemindModal(id) {
      currentPaymentId = id;
      fetch(`/staff_installments/${id}`)
        .then(res => res.json())
        .then(data => {
          const client = data.payment;
          document.getElementById('emailTo').value = client.email;
          const dueDate = new Date(client.due_date).toLocaleDateString('en-US', { year:'numeric', month:'long', day:'numeric' });
          const formattedAmount = (Number(client.amount || 0)).toLocaleString();

          const defaultSubject = `Payment Due Reminder â€“ Payment ID ${client.payment_id} due ${dueDate}`;
          const defaultBody = `<p>Dear ${client.name},</p>
          <p>This is a friendly reminder that your <strong>${client.payment_type}</strong> of <strong>â‚±${formattedAmount}</strong> is due on <strong>${dueDate}</strong>.</p>
          <p>Please settle your payment on or before the due date to avoid penalties.</p>
           <p>Just Log in to our website and go to Payment History then click the "Pay Here" button to pay your due amount.</p>
          <p>Thank you,<br>Everlasting Peace Memorial Park</p>`;

          document.getElementById('emailSubject').value = defaultSubject;
          document.getElementById('emailBody').value = defaultBody;
          document.getElementById('messagePreview').innerHTML = defaultBody;
          backdrop.style.display = 'flex';

          updateSendType(); // apply editable/readonly logic
        })
        .catch(() => alert("Failed to load payment details."));
    }

    function closeRemindModal() {
      backdrop.style.display = 'none';
      currentPaymentId = null;
    }

    document.getElementById('emailBody').addEventListener('input', () => {
      document.getElementById('messagePreview').innerHTML = document.getElementById('emailBody').value;
    });

    function sendReminderFromModal() {
      const payload = {
        sendType: document.getElementById('sendType').value,
        subject: document.getElementById('emailSubject').value,
        html: document.getElementById('emailBody').value,
        to: document.getElementById('emailTo').value
      };

      const btn = document.getElementById('sendEmailBtn');
      btn.disabled = true;
      btn.textContent = 'Sending...';

      fetch(`/staff_installments/remind/${currentPaymentId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
      .then(res => res.json())
      .then(data => {
        alert(data.message);
        closeRemindModal();
        btn.disabled = false;
        btn.textContent = 'Send Email';
      })
      .catch(() => {
        alert("Error sending reminder.");
        btn.disabled = false;
        btn.textContent = 'Send Email';
      });
    }

    backdrop.addEventListener('click', (e) => {
      if (e.target === backdrop) closeRemindModal();
    });

    // ===== NEW FEATURE: AUTO vs MANUAL =====
    const sendTypeSelect = document.getElementById('sendType');
    sendTypeSelect.addEventListener('change', updateSendType);

    function updateSendType() {
      const isManual = sendTypeSelect.value === 'manual';
      const subj = document.getElementById('emailSubject');
      const body = document.getElementById('emailBody');

      subj.readOnly = !isManual;
      body.readOnly = !isManual;
      body.style.backgroundColor = isManual ? 'white' : '#f3f3f3';
      subj.style.backgroundColor = isManual ? 'white' : '#f3f3f3';
    }

    function sendWarning(paymentId) {
  if (!confirm("Send WARNING (3 days left) notification to client?")) return;
  fetch(`/staff_installments/send_warning/${paymentId}`, { method: "POST" })
    .then(res => res.json())
    .then(data => alert(data.message || "Warning sent successfully."))
    .catch(() => alert("Failed to send warning notification."));
}

function sendFinalWarning(paymentId) {
  if (!confirm("Send FINAL WARNING (7 days overdue) notification to client?")) return;
  fetch(`/staff_installments/send_final_warning/${paymentId}`, { method: "POST" })
    .then(res => res.json())
    .then data => alert(data.message || "Final warning sent successfully."))
    .catch(() => alert("Failed to send final warning notification."));
}

  </script>
</body>
</html>
