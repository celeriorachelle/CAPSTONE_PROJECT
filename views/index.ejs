<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Everlasting Peace Memorial Park Cemetery</title>
    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

</head> 
<body>
  <header class="header">
        <div class="nav-container">
            <div class="left-nav-section">
                <div class="logo">
                    <img src="/images/logo2.png" alt="Memorial Services Logo" class="logo-img" style="height:40px;">
                </div>
                <nav class="nav-links">
                    <a href="#inquiries">INQUIRIES</a>
                    <a href="#support">SUPPORT</a>
                    <a href="#contact">CONTACT US</a>
                </nav>
            </div>
          <div class="profile-dropdown-wrapper">
            <div class="profile-btn">
                <i class="bi bi-person-circle"></i>
            </div>
            <div class="dropdown-toggle">
                <i class="bi bi-caret-down-fill"></i>
            </div>
           <div class="dropdown-menu">
            <a href="/login" class="dropdown-link">Sign In</a>
            <a href="/register" class="dropdown-link">Sign Up</a>
            </div>

            </div>
        <script>
        document.addEventListener("DOMContentLoaded", () => {
            const dropdownWrapper = document.querySelector(".profile-dropdown-wrapper");
            const dropdownMenu = document.querySelector(".dropdown-menu");
            const profileBtn = document.querySelector(".profile-btn");
            const dropdownToggle = document.querySelector(".dropdown-toggle");

            [profileBtn, dropdownToggle].forEach(btn => {
                btn.addEventListener("click", () => {
                    profileBtn.classList.toggle("active");
                    dropdownToggle.classList.toggle("active");
                });
            });

            document.addEventListener("click", (e) => {
                if (!e.target.closest(".profile-dropdown-wrapper")) {
                    profileBtn.classList.remove("active");
                    dropdownToggle.classList.remove("active");
                }
            });
        });
        </script>

        </div></div>
    </header>

    <main class="main-container">
        <div class="content-section">
            <div class="text-content">
                <h1 class="cemetery-title"><span class="title-main">Everlasting Peace Memorial</span> <span class="title-sub"> <br>Park Cemetery</span></h1>
                <p class="subtitle">Gardens of Peace</p>
                
                <div class="section-content">
                    <h2 class="section-header">A Place to Remember</h2>
                    <p class="section-description">
                        Discover our beautifully landscaped memorial gardens where memories live forever. Explore different sections, each thoughtfully designed to provide comfort and serenity for families and visitors.
                    </p>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="search-fields">
                <div class="search-grid">
                    <input type="text" class="search-input" placeholder="First Name" id="firstName">
                    <input type="text" class="search-input" placeholder="Middle Name" id="middleName">
                    <input type="text" class="search-input" placeholder="Last Name" id="lastName">
                </div>
                
                <div class="search-row">
                    <select class="search-select" id="yearBorn">
                        <option value="">Year Born</option>
                        <option value="1920">1920</option>
                        <option value="1925">1925</option>
                        <option value="1930">1930</option>
                        <option value="1935">1935</option>
                        <option value="1940">1940</option>
                    </select>
                    <select class="search-select" id="yearDied">
                        <option value="">Year Died</option>
                        <option value="2020">2020</option>
                        <option value="2021">2021</option>
                        <option value="2022">2022</option>
                        <option value="2023">2023</option>
                        <option value="2024">2024</option>
                    </select>
                    <button class="search-btn" onclick="searchRecords()">SEARCH <i class="bi bi-search"></i></button>
                </div>
            </div>

            <div class="map-container">
                <div id="map"></div>
                        <script>
document.addEventListener("DOMContentLoaded", function () {
    const w = 1017; 
    const h = 573;  

    const map = L.map("map", {
        crs: L.CRS.Simple,
        minZoom: -1,
        maxZoom: 4
    });

    const bounds = [[0,0], [h,w]];
    L.imageOverlay("/images/map.png", bounds).addTo(map);
    map.fitBounds(bounds);

    const plotLayer = L.layerGroup().addTo(map);

    // Sample data for categories and plots
    const categories = [
        { name: "Garden A", coords: [100, 200], plots: [
            {coords: [120, 210], status: "available", info: "Plot 1: John Doe, 1920-2000"},
            {coords: [130, 220], status: "occupied", info: "Plot 2: Jane Smith, 1930-1990"},
            {coords: [125, 215], status: "reserved", info: "Plot 3: Reserved"}
        ]},
        { name: "Garden B", coords: [300, 500], plots: [
            {coords: [310, 510], status: "available", info: "Plot 4: Someone Else"}
        ]}
    ];

// Function to get color for plot status
function getPlotColor(status) {
    switch(status) {
        case "available": return "green";
        case "occupied": return "red";
        case "reserved": return "yellow";
        default: return "gray";
    }
}

// Track currently zoomed plot
let currentZoomedPlot = null;
let originalView = null;

// Show plot markers
function showPlots(plots) {
    plotLayer.clearLayers();
    currentZoomedPlot = null; // Reset zoom state

    plots.forEach((p, index) => {
        const color = getPlotColor(p.status);
        const borderColor = color; // same color for border

        // Add spacing between icons - offset each plot by 60 pixels
        const spacedCoords = [
            p.coords[0] + (index * 60), // Add vertical spacing
            p.coords[1] + (index * 60)  // Add horizontal spacing
        ];

        const icon = L.divIcon({
            className: "plot-dot",
            html: `<div style="
                width: 50px;
                height: 50px;
                border-radius: 25%;
                background-color: ${color};
                border: 2px solid black;
                margin: 10px;
            "></div>`,
            iconSize: [50, 50], // Updated to match the actual size
            iconAnchor: [25, 25] // Center the larger dot
        });

        const marker = L.marker(spacedCoords, {icon: icon})
         .addTo(plotLayer)
         .bindPopup(p.info);

        // Add click event for zoom functionality
        marker.on('click', function(e) {
            e.originalEvent.stopPropagation(); // Prevent map click event
            
            if (currentZoomedPlot === marker) {
                // If clicking the same plot, zoom out
                if (originalView) {
                    map.setView(originalView.center, originalView.zoom);
                }
                currentZoomedPlot = null;
                originalView = null;
            } else {
                // Store original view if not already stored
                if (!originalView) {
                    originalView = {
                        center: map.getCenter(),
                        zoom: map.getZoom()
                    };
                }
                
                // Zoom in to the clicked plot
                map.setView(spacedCoords, 4); // Higher zoom level
                currentZoomedPlot = marker;
            }
        });
    });
}

// Icon for categories (larger dots)
function addCategoryMarkers(categories) {
    categories.forEach(cat => {
        const icon = L.divIcon({
            className: "category-dot",
            html: `<div style="
                width: 10px;
                height: 10px;
                border-radius: 50%;
                background-color: yellow;
                border: 2px solid yellow;
            "></div>`,
            iconSize: [10, 10],
            iconAnchor: [12, 12]
        });

        const marker = L.marker(cat.coords, {icon: icon}).addTo(map);
        marker.bindPopup(`<b>${cat.name}</b><br>Click to view plots`);

        marker.on('click', () => {
            map.setView(cat.coords, 2); // zoom in
            showPlots(cat.plots);
        });
    });
}

// Add categories to the map
addCategoryMarkers(categories);

// Add map click event to zoom out when clicking empty space
map.on('click', function(e) {
    if (currentZoomedPlot && originalView) {
        map.setView(originalView.center, originalView.zoom);
        currentZoomedPlot = null;
        originalView = null;
    } else if (map.getZoom() >= 2) {
        // If we're zoomed in to a garden view, zoom out to main view and clear plots
        map.fitBounds(bounds);
        plotLayer.clearLayers();
        currentZoomedPlot = null;
        originalView = null;
    }
});

});
</script>
            </div>
        </div>
    </main>

           <footer>
        <%- include('partials/footer') %>
    </footer>

    <script>
    
        // Smooth scrolling for navigation
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Add input event listeners for real-time feedback
        document.querySelectorAll('.search-input, .search-select').forEach(input => {
            input.addEventListener('focus', function() {
                this.style.transform = 'scale(1.02)';
            });
            
            input.addEventListener('blur', function() {
                this.style.transform = 'scale(1)';
            });
        });

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
        
            
            // Add entrance animation delay
            setTimeout(() => {
                document.querySelector('.content-section').style.opacity = '1';
                document.querySelector('.search-section').style.opacity = '1';
            }, 300);
        });

        // Add keyboard support for search
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                searchRecords();
            }
        });
    </script>

</body>
</html>