<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Staff | View Client Bookings</title>
  <link rel="stylesheet" href="/stylesheets/staff_viewbookings.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    /* ==============================
       EXISTING STYLES (KEEP)
    ============================== */
    .modal { display: none; position: fixed; z-index: 999; left:0; top:0; width:100%; height:100%; overflow:auto; background: rgba(0,0,0,0.4); }
    .modal-content { background:#fff; margin:8% auto; padding:20px; border-radius:8px; width:90%; max-width:520px; box-shadow:0 8px 30px rgba(0,0,0,0.2); }
    .modal-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:12px; }
    .modal-header h3 { margin:0; }
    .close { cursor:pointer; font-size:22px; color:#333; }
    .btn-action { padding:8px 10px; border:none; border-radius:6px; cursor:pointer; font-weight:600; }
    .btn-approve { background:#28a745; color:#fff; }
    .btn-reject { background:#dc3545; color:#fff; }
    .btn-notify { background:#17a2b8; color:#fff; }
    .action-buttons { display:flex; gap:6px; flex-wrap:wrap; }
    .status-badge { padding:6px 8px; border-radius:6px; color:#fff; font-weight:600; text-transform:capitalize; }
    .status-pending { background:#f0ad4e; }
    .status-approved { background:#28a745; }
    .status-cancelled { background:#6c757d; }

    /* ==============================
       ðŸ”¹ IMPROVED FILTER BUTTON DESIGN
    ============================== */
    .filters {
      display: flex;
      gap: 10px;
      margin-top: 15px;
      flex-wrap: wrap;
    }

    .filters button {
      background: #f8f9fa;
      border: 2px solid #ddd;
      padding: 8px 18px;
      border-radius: 25px;
      cursor: pointer;
      font-weight: 600;
      color: #555;
      font-size: 14px;
      transition: all 0.25s ease;
      box-shadow: 0 2px 4px rgba(0,0,0,0.08);
    }

    .filters button:hover {
      background: #e9ecef;
      border-color: #bbb;
      transform: translateY(-2px);
    }

    .filters button.active {
      background: linear-gradient(135deg, #007bff, #0056b3);
      color: white;
      border-color: #0056b3;
      box-shadow: 0 4px 10px rgba(0, 123, 255, 0.25);
      transform: translateY(-2px);
    }

    /* ==============================
       ðŸ”¹ PAGINATION BUTTONS
    ============================== */
    .pagination {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 12px;
      margin: 25px 0;
    }

    .pagination button {
      background: #f8f9fa;
      border: 2px solid #ddd;
      padding: 8px 16px;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      color: #333;
      transition: all 0.25s ease;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .pagination button:hover:not(:disabled) {
      background: #007bff;
      color: #fff;
      border-color: #007bff;
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0,123,255,0.25);
    }

    .pagination button:disabled {
      background: #f1f1f1;
      color: #aaa;
      border-color: #ddd;
      cursor: not-allowed;
      box-shadow: none;
    }

    #pageInfo {
      font-weight: 600;
      color: #555;
      font-size: 14px;
      letter-spacing: 0.3px;
    }

    /* ==============================
       ðŸ”¹ SEARCH INPUT DESIGN
    ============================== */
    #searchInput {
      padding: 10px 16px;
      border-radius: 25px;
      border: 2px solid #ddd;
      width: 280px;
      font-size: 14px;
      margin-top: 10px;
      transition: all 0.25s ease;
    }

    #searchInput:focus {
      border-color: #007bff;
      outline: none;
      box-shadow: 0 0 6px rgba(0,123,255,0.3);
    }

    /* ==============================
       ðŸ”¹ TABLE POLISH
    ============================== */
 
    /* ==============================
       ðŸ”¹ HEADER STYLING
    ============================== */
    header h1 {
      color: #333;
      font-size: 24px;
      margin-bottom: 10px;
    }

    header {
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      margin-bottom: 20px;
    }

    /* ==============================
       ðŸ”¹ EMPTY STATE
    ============================== */
    #emptyState {
      text-align: center;
      font-weight: 500;
      color: #666;
      margin-top: 30px;
      font-size: 15px;
    }
  </style>
</head>
<body>
  <div class="sidebar">
    <h2>Staff Panel</h2>
    <ul>
<li><a href="/staff_dashboard">Dashboard</a></li>
      <li><a href="/staff_viewbookings" class="active">View Bookings</a></li>
      <li><a href="/maps">Cemetery Map</a></li>
      <li><a href="/staff_installments">Track Installments</a></li>
      <li><a href="/staff_checknotificationlogs">Notification Logs</a></li>
      <li><a href="/staff_viewpaymentreports">Payment Reports</a></li>
      <li><a href="/login/logout">Logout</a></li>
    </ul>
  </div>

  <div class="main">
    <header>
      <h1>All Client Bookings</h1>
      <input id="searchInput" type="text" placeholder="Search by name or status...">
      <div class="filters">
        <button onclick="filterStatus('all')" class="active" id="filter-all">All</button>
        <button onclick="filterStatus('pending')" id="filter-pending">Pending</button>
        <button onclick="filterStatus('approved')" id="filter-approved">Approved</button>
        <button onclick="filterStatus('cancelled')" id="filter-cancelled">Cancelled</button>
      </div>
    </header>

    <div id="loadingState" class="loading">Loading...</div>
    <div id="bookingsTableContainer" style="display:none;">
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>Client</th>
            <th>Service</th>
            <th>Booking Date</th>
            <th>Status</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="bookingTableBody"></tbody>
      </table>
    </div>
    <div id="emptyState" style="display:none;">No bookings found.</div>
    <div class="pagination" id="paginationContainer" style="display:none;">
      <button onclick="changePage('prev')" id="prevBtn">Previous</button>
      <span id="pageInfo">Page 1 of 1</span>
      <button onclick="changePage('next')" id="nextBtn">Next</button>
    </div>
  </div>

  <!-- Booking Details Modal -->
  <div id="bookingModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-info-circle"></i> Booking Details</h3>
        <span class="close" onclick="closeModal()">&times;</span>
      </div>
      <div id="bookingDetails"></div>
    </div>
  </div>

  <!-- Notify Modal -->
  <div id="notifyModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-envelope"></i> Send Notification</h3>
        <span class="close" onclick="closeNotifyModal()">&times;</span>
      </div>
      <div>
        <textarea id="notifyMessage" rows="5" placeholder="Enter message to user" style="width:100%; padding:10px; border-radius:6px;"></textarea>
        <div style="text-align:right; margin-top:12px;">
          <button class="btn-action btn-approve" onclick="sendNotificationMessage()">Send</button>
          <button class="btn-action btn-reject" onclick="closeNotifyModal()">Cancel</button>
        </div>
      </div>
    </div>
  </div>

<script>
window.bookings = <%- JSON.stringify(bookings) %>;
class BookingManager {
  constructor() {
    this.bookings = window.bookings || [];
    this.filteredBookings = [...this.bookings];
    this.currentFilter = 'all';
    this.currentPage = 1;
    this.itemsPerPage = 10;
    this.searchTerm = '';
    this.updateDisplay();
    document.getElementById('loadingState').style.display = 'none';
    document.getElementById('bookingsTableContainer').style.display = 'block';
    document.getElementById('paginationContainer').style.display = 'flex';
    this.bindEvents();
  }
  bindEvents() {
    document.getElementById('searchInput').addEventListener('input', (e) => {
      this.searchTerm = e.target.value.toLowerCase();
      this.applyFilters();
    });
    window.addEventListener('click', (e) => {
      const modal = document.getElementById('bookingModal');
      if (e.target === modal) this.closeModal();
    });
  }
  filterStatus(status) {
    this.currentFilter = status;
    this.currentPage = 1;
    document.querySelectorAll('.filters button').forEach(btn => btn.classList.remove('active'));
    const btn = document.getElementById(`filter-${status}`);
    if (btn) btn.classList.add('active');
    this.applyFilters();
  }
  applyFilters() {
    let filtered = [...this.bookings];
    if (this.currentFilter !== 'all') filtered = filtered.filter(bk => bk.status === this.currentFilter);
    if (this.searchTerm)
      filtered = filtered.filter(bk =>
        (bk.clientName || '').toLowerCase().includes(this.searchTerm) ||
        (''+bk.id).toLowerCase().includes(this.searchTerm) ||
        (bk.service || '').toLowerCase().includes(this.searchTerm)
      );
    this.filteredBookings = filtered;
    this.currentPage = 1;
    this.updateDisplay();
  }
  updateDisplay() {
    const tbody = document.getElementById('bookingTableBody');
    const startIndex = (this.currentPage - 1) * this.itemsPerPage;
    const endIndex = startIndex + this.itemsPerPage;
    const pageBookings = this.filteredBookings.slice(startIndex, endIndex);
    if (pageBookings.length === 0) {
      document.getElementById('bookingsTableContainer').style.display = 'none';
      document.getElementById('emptyState').style.display = 'block';
      document.getElementById('paginationContainer').style.display = 'none';
      return;
    }
    document.getElementById('bookingsTableContainer').style.display = 'block';
    document.getElementById('emptyState').style.display = 'none';
    document.getElementById('paginationContainer').style.display = 'flex';
    tbody.innerHTML = pageBookings.map(bk => {
      const statusClass = `status-${bk.status}`;
      return `
      <tr>
        <td><strong>${bk.id}</strong></td>
        <td>${bk.clientName || ''}</td>
        <td>${bk.service || ''}</td>
        <td>${bk.date ? new Date(bk.date).toLocaleDateString() : ''}</td>
        <td><span class="status-badge ${statusClass}">${bk.status}</span></td>
        <td>
          <div class="action-buttons">
            <button class="btn-action btn-view" onclick="bookingManager.viewBooking('${bk.id}')">
              <i class="fas fa-eye"></i> View
            </button>
            ${bk.status === 'pending' ? `
              <button class="btn-action btn-approve" onclick="updateStatus(${bk.id}, 'approved')">
                <i class="fas fa-check"></i> Approve
              </button>
              <button class="btn-action btn-reject" onclick="updateStatus(${bk.id}, 'cancelled')">
                <i class="fas fa-times"></i> Reject
              </button>
              <button class="btn-action btn-notify" onclick="openNotifyModal(${bk.id})">
                <i class="fas fa-bell"></i> Notify
              </button>` : `
              <button class="btn-action btn-notify" onclick="openNotifyModal(${bk.id})">
                <i class="fas fa-bell"></i> Notify
              </button>`}
          </div>
        </td>
      </tr>`;
    }).join('');
    this.updatePagination();
  }
  changePage(direction) {
    const totalPages = Math.ceil(this.filteredBookings.length / this.itemsPerPage) || 1;
    if (direction === 'next' && this.currentPage < totalPages) {
      this.currentPage++;
    } else if (direction === 'prev' && this.currentPage > 1) {
      this.currentPage--;
    }
    this.updateDisplay();
  }
  viewBooking(id) {
    const booking = this.bookings.find(bk => bk.id == id);
    if (!booking) return;
    const detailsHtml = `
      <div style="display: grid; gap: 1rem;">
        <p><strong>Booking ID:</strong> ${booking.id}</p>
        <p><strong>Client Name:</strong> ${booking.clientName}</p>
        <p><strong>Email:</strong> ${booking.email || 'N/A'}</p>
        <p><strong>Phone:</strong> ${booking.phone || 'N/A'}</p>
        <p><strong>Date:</strong> ${booking.date ? new Date(booking.date).toLocaleDateString() : 'N/A'}</p>
        <p><strong>Time:</strong> ${booking.time || 'N/A'}</p>
        <p><strong>Service:</strong> ${booking.service || 'N/A'}</p>
        <p><strong>Status:</strong> ${booking.status}</p>
        <p><strong>Notes:</strong> ${booking.notes || 'N/A'}</p>
      </div>`;
    document.getElementById('bookingDetails').innerHTML = detailsHtml;
    document.getElementById('bookingModal').style.display = 'block';
  }
  updatePagination() {
    const totalPages = Math.ceil(this.filteredBookings.length / this.itemsPerPage) || 1;
    document.getElementById('pageInfo').textContent = `Page ${this.currentPage} of ${totalPages}`;
    document.getElementById('prevBtn').disabled = this.currentPage === 1;
    document.getElementById('nextBtn').disabled = this.currentPage === totalPages;
  }
  closeModal() {
    document.getElementById('bookingModal').style.display = 'none';
  }
}
let bookingManager;
function filterStatus(s){bookingManager.filterStatus(s);}
function changePage(d){bookingManager.changePage(d);}
function closeModal(){bookingManager.closeModal();}
let currentBookingIdForNotify = null;
function openNotifyModal(bookingId) {
  currentBookingIdForNotify = bookingId;
  document.getElementById('notifyMessage').value = '';
  document.getElementById('notifyModal').style.display = 'block';
}
function closeNotifyModal() {
  document.getElementById('notifyModal').style.display = 'none';
}
async function updateStatus(bookingId, newStatus) {
  try {
    const endpoint = newStatus === 'approved' ? `/staff_viewbookings/approve/${bookingId}` : `/staff_viewbookings/reject/${bookingId}`;
    const res = await fetch(endpoint, { method: 'POST', headers: { 'Content-Type':'application/json' } });
    const data = await res.json();
    if (data.success) {
      const idx = bookingManager.bookings.findIndex(a => (''+a.id) === (''+bookingId));
      if (idx !== -1) {
        bookingManager.bookings[idx].status = newStatus;
        bookingManager.applyFilters();
      } else {
        location.reload();
      }
    } else {
      alert('Failed to update status');
    }
  } catch (err) {
    console.error('Error updating status:', err);
    alert('Server error');
  }
}
async function sendNotificationMessage() {
  const message = document.getElementById('notifyMessage').value.trim();
  if (!message) return alert('Please enter a message.');
  try {
    const res = await fetch(`/staff_viewbookings/notify/${currentBookingIdForNotify}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message })
    });
    const data = await res.json();
    if (data.success) {
      alert('Notification sent');
      closeNotifyModal();
    } else {
      alert('Failed to send notification');
    }
  } catch (err) {
    console.error('Error sending notification:', err);
    alert('Server error');
  }
}
document.addEventListener('DOMContentLoaded', () => {
  bookingManager = new BookingManager();
});

// ...existing code...

async function updateStatus(bookingId, newStatus) {
  try {
    const endpoint = newStatus === 'approved' 
      ? `/staff_viewbookings/approve/${bookingId}` 
      : `/staff_viewbookings/reject/${bookingId}`;
    const res = await fetch(endpoint, { method: 'POST', headers: { 'Content-Type':'application/json' } });
    const data = await res.json();
    if (data.success) {
      const idx = bookingManager.bookings.findIndex(a => (''+a.id) === (''+bookingId));
      if (idx !== -1) {
        bookingManager.bookings[idx].status = newStatus;
        bookingManager.applyFilters();
      } else {
        location.reload();
      }
      showToast("User notified");
    } else {
      alert('Failed to update status');
    }
  } catch (err) {
    console.error('Error updating status:', err);
    alert('Server error');
  }
}

// ================================
// Toast notification
// ================================
function showToast(message) {
  let toast = document.createElement('div');
  toast.textContent = message;
  toast.style.position = 'fixed';
  toast.style.bottom = '20px';
  toast.style.right = '20px';
  toast.style.padding = '12px 20px';
  toast.style.background = '#28a745';
  toast.style.color = '#fff';
  toast.style.borderRadius = '6px';
  toast.style.boxShadow = '0 4px 12px rgba(0,0,0,0.2)';
  toast.style.zIndex = 9999;
  toast.style.fontWeight = '600';
  toast.style.opacity = '0';
  toast.style.transition = 'opacity 0.3s ease';

  document.body.appendChild(toast);
  setTimeout(() => toast.style.opacity = '1', 50);
  setTimeout(() => {
    toast.style.opacity = '0';
    setTimeout(() => document.body.removeChild(toast), 300);
  }, 2500);
}

</script>
</body>
</html>
