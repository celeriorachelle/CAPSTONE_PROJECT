<!DOCTYPE html>
<html>
<head>
  <title>Cemetery Map</title>
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    .map-container { max-width: 1200px; margin: 0 auto; }
    #map { 
      height: 700px; 
      width: 100%; 
      border: 1px solid #ddd; 
      border-radius: 8px; 
      background: white !important; 
    }
    .info-box { margin-top: 12px; padding: 12px; background: #fff; border: 1px solid #ddd; border-radius: 6px; min-height: 60px; }
    /* Override Leaflet's background */
    .leaflet-container {
      background: white !important;
    }
  </style>
</head>
<body>
  <div class="map-container">
    <h3>Cemetery Map (Click a Section)</h3>
    <div class="search-container" style="margin-bottom: 15px;">
      <form id="searchForm" onsubmit="handleSearch(event)" style="display: flex; gap: 10px;">
        <input type="text" id="firstName" placeholder="First Name" style="padding: 5px;">
        <input type="text" id="lastName" placeholder="Last Name" style="padding: 5px;">
        <button type="submit" style="padding: 5px 15px;">Search</button>
        <button type="button" onclick="clearSearch()" style="padding: 5px 15px;">Clear Search</button>
      </form>
    </div>
    <div id="map"></div>
    <div id="infoBox" class="info-box">
      <em>Click a section to view plots. You can also draw/edit polygons.</em>
    </div>
  </div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <script>
  // ----- 1. Store all polygons and their original colors -----
  const polygons = {
    familyEstates: null,
    memorialChapel: null,
    heritageGardens: null,
    veteransMemorial: null,
    serenityColumbarium: null
  };

  const defaultPolygonStyle = {
    color: '#808080',
    fillColor: '#A9A9A9',
    fillOpacity: 0.3,
    weight: 2
  };

  const highlightPolygonStyle = {
    color: 'black',
    fillColor: 'black',
    fillOpacity: 0.5,
    weight: 3
  };

  // Function to reset all polygon colors
  function resetPolygonColors() {
    Object.values(polygons).forEach(polygon => {
      if (polygon) {
        polygon.setStyle(defaultPolygonStyle);
      }
    });
  }

  // ----- 2. Search functionality -----
  let searchHighlightLayer = null;
  
  async function handleSearch(event) {
    event.preventDefault();
    const firstName = document.getElementById('firstName').value.trim();
    const lastName = document.getElementById('lastName').value.trim();
    
    if (!firstName && !lastName) {
      alert('Please enter at least a first name or last name');
      return;
    }
    
    // Reset all polygon colors and clear previous highlights
    resetPolygonColors();
    if (searchHighlightLayer) {
      map.removeLayer(searchHighlightLayer);
    }
    
    const infoBox = document.getElementById('infoBox');
    infoBox.innerHTML = '<em>Searching...</em>';
    
    try {
      const response = await fetch(`/plots/search?firstName=${encodeURIComponent(firstName)}&lastName=${encodeURIComponent(lastName)}`);
      const plots = await response.json();
      
      if (!plots || plots.length === 0) {
        infoBox.innerHTML = '<em>No matching plots found.</em>';
        return;
      }
      
      // Display results and highlight plots
      let html = `<strong>Found ${plots.length} matching plot(s):</strong><br><br>`;
      const plotLayers = [];
      
      // Keep track of which sections contain matches
      const matchingSections = new Set();
      
      plots.forEach(plot => {
        // Track which section this plot belongs to
        if (plot.location) {
          if (plot.location.includes('Family Estates')) matchingSections.add('familyEstates');
          if (plot.location.includes('Memorial Chapel')) matchingSections.add('memorialChapel');
          if (plot.location.includes('Heritage Gardens')) matchingSections.add('heritageGardens');
          if (plot.location.includes('Veterans Memorial')) matchingSections.add('veteransMemorial');
          if (plot.location.includes('Serenity Columbarium')) matchingSections.add('serenityColumbarium');
        }

        if (plot.coord_x && plot.coord_y) {
          const rectWidth = 20;
          const rectHeight = 20;
          const bounds = [
            [plot.coord_y - rectHeight/2, plot.coord_x - rectWidth/2],
            [plot.coord_y - rectHeight/2, plot.coord_x + rectWidth/2],
            [plot.coord_y + rectHeight/2, plot.coord_x + rectWidth/2],
            [plot.coord_y + rectHeight/2, plot.coord_x - rectWidth/2]
          ];
          
          const rect = L.polygon(bounds, {
            color: '#FF4500',
            fillColor: '#FF4500',
            fillOpacity: 0.6,
            weight: 2
          });
          
          plotLayers.push(rect);
        }
        
        html += `
          <div style="margin-bottom: 10px; padding: 5px; border-bottom: 1px solid #eee;">
            <b>Plot #${plot.plot_number || ''}</b><br>
            Location: ${plot.location || ''}<br>
            Type: ${plot.type || ''}<br>
            Deceased: ${plot.deceased_firstName || ''} ${plot.deceased_lastName || ''}<br>
            Birth: ${plot.birth_date || 'N/A'}<br>
            Death: ${plot.death_date || 'N/A'}
          </div>
        `;
      });
      
      infoBox.innerHTML = html;
      
      // Highlight matching section polygons
      matchingSections.forEach(section => {
        if (polygons[section]) {
          polygons[section].setStyle(highlightPolygonStyle);
        }
      });
      
      // Create a feature group for the highlighted plots
      if (plotLayers.length > 0) {
        searchHighlightLayer = L.featureGroup(plotLayers).addTo(map);
        map.fitBounds(searchHighlightLayer.getBounds(), { padding: [50, 50] });
      }
      
    } catch (error) {
      console.error('Search error:', error);
      infoBox.innerHTML = '<em>Error performing search. Please try again.</em>';
    }
  }
  
  // ----- 2. Preloaded sections (unchanged) -----
  // (Coordinate helper and picker removed)
    // ----- 2. Initialize Map -----
    const map = L.map('map', {
      crs: L.CRS.Simple,
      minZoom: -2,
      maxZoom: 2,
      zoom: 0,
      center: [0,0]
    });

    const imgWidth = 4269;
    const imgHeight = 2400;
    const bounds = [[0, 0], [imgHeight, imgWidth]];
    L.imageOverlay('/images/newmap.png', bounds).addTo(map);
    map.fitBounds(bounds);

    // Utility: build HTML for plot tooltip/popup
    function plotHtml(p) {
      const fullName = [p.deceased_firstName, p.deceased_middleName, p.deceased_lastName].filter(Boolean).join(' ');
      const born = p.birth_date ? new Date(p.birth_date).toLocaleDateString() : '—';
      const died = p.death_date ? new Date(p.death_date).toLocaleDateString() : '—';
      return `
        <div>
          <div><b>Plot:</b> ${p.plot_number || 'N/A'}</div>
          <div><b>Location:</b> ${p.location || 'N/A'}</div>
          <div><b>Type:</b> ${p.type || 'N/A'}</div>
          <div><b>Status:</b> ${p.availability || 'N/A'}</div>
          <hr style="margin:6px 0;"/>
          <div><b>Name:</b> ${fullName || 'N/A'}</div>
          <div><b>Born:</b> ${born}</div>
          <div><b>Died:</b> ${died}</div>
          <div><b>X,Y:</b> ${p.coord_x}, ${p.coord_y}</div>
        </div>
      `;
    }

    // ----- 3. Render Family Estates polygon and plots -----
    // 1. Draw the Family Estates polygon
    const familyEstatesCoords = [
      [984.4375, 1336.5],
      [1119.4375, 1835.5],
      [730.4375, 1940.5],
      [593.4375, 1443.5]
    ];
    const familyEstatesPolygon = L.polygon(familyEstatesCoords, defaultPolygonStyle).addTo(map);
    polygons.familyEstates = familyEstatesPolygon;

    // Helper to render plots for a polygon and endpoint
    // Add clear search function
    function clearSearch() {
      document.getElementById('firstName').value = '';
      document.getElementById('lastName').value = '';
      resetPolygonColors();
      if (searchHighlightLayer) {
        map.removeLayer(searchHighlightLayer);
      }
      document.getElementById('infoBox').innerHTML = '<em>Click a section to view plots. You can also draw/edit polygons.</em>';
    }

    function handlePolygonClick(endpoint, label, rectsKey) {
      return function() {
        const infoBox = document.getElementById('infoBox');
        infoBox.innerHTML = `<em>Fetching ${label} plots...</em>`;

        // Reset all polygon colors and highlight the clicked one
        resetPolygonColors();
        const clickedPolygon = Object.entries(polygons).find(([key, poly]) => 
          poly._leaflet_id === this._leaflet_id
        );
        if (clickedPolygon) {
          clickedPolygon[1].setStyle(highlightPolygonStyle);
        }

        // Clear any search highlights
        if (searchHighlightLayer) {
          map.removeLayer(searchHighlightLayer);
        }

        // clear previous rectangles
        if (window[rectsKey]) {
          window[rectsKey].forEach(r => map.removeLayer(r));
        }
        window[rectsKey] = [];

        fetch(endpoint)
          .then(res => {
            if (!res.ok) throw new Error('Network response was not ok: ' + res.status);
            return res.json();
          })
          .then(plots => {
            if (!Array.isArray(plots)) {
              infoBox.innerHTML = `<span style='color:red'>Unexpected response from server</span>`;
              return;
            }
            const rendered = [];
            const missing = [];
            plots.forEach(plot => {
              const x = parseFloat(plot.coord_x);
              const y = parseFloat(plot.coord_y);
              const detailsHtml = `
                <b>Plot #${plot.plot_number || ''}</b><br>
                Location: ${plot.location || ''}<br>
                Type: ${plot.type || ''}<br>
                Price: ${plot.price || ''}<br>
                Status: ${plot.availability || ''}<br>
                Deceased: ${plot.deceased_firstName || ''} ${plot.deceased_lastName || ''}<br>
                Birth: ${plot.birth_date || ''}<br>
                Death: ${plot.death_date || ''}
              `;
              if (isFinite(x) && isFinite(y)) {
                const rectWidth = 20;
                const rectHeight = 20;
                const bounds = [
                  [y - rectHeight/2, x - rectWidth/2],
                  [y - rectHeight/2, x + rectWidth/2],
                  [y + rectHeight/2, x + rectWidth/2],
                  [y + rectHeight/2, x - rectWidth/2]
                ];
                const color = (plot.availability || '').toLowerCase() === 'available' ? '#4A90E2' : '#E24A90';
                const rect = L.polygon(bounds, {
                  color,
                  fillColor: color,
                  fillOpacity: 0.8,
                  weight: 1
                }).addTo(map);
                window[rectsKey].push(rect);
                rendered.push(detailsHtml);
                rect.bindPopup(detailsHtml);
              } else {
                missing.push(detailsHtml);
              }
            });
            let html = `<b>${label}</b><br>`;
            html += `<div><strong>Rendered plots:</strong> ${rendered.length}</div>`;
            if (rendered.length > 0) html += `<div style="margin-top:6px;max-height:180px;overflow:auto;"><ul>` + rendered.map(p => `<li style='margin-bottom:8px;'>${p}</li>`).join('') + `</ul></div>`;
            html += `<div style="margin-top:8px;"><strong>Missing coordinates:</strong> ${missing.length}</div>`;
            if (missing.length > 0) html += `<div style="max-height:180px;overflow:auto"><ul>` + missing.map(p => `<li style='margin-bottom:8px;'>${p}</li>`).join('') + `</ul></div>`;
            infoBox.innerHTML = html;
            if (window[rectsKey].length > 0) {
              const group = L.featureGroup(window[rectsKey]);
              map.fitBounds(group.getBounds(), { padding: [30, 30] });
            }
          })
          .catch(err => {
            infoBox.innerHTML = `<span style='color:red'>Error fetching ${label} plots: ${err.message}</span>`;
          });
      };
    }

    // Family Estates polygon and handler
    familyEstatesPolygon.on('click', handlePolygonClick('/plots/family-estates', 'Family Estates', 'familyEstatesRects'));

    // Memorial Chapel polygon
    const memorialChapelCoords = [
      [1092.4375, 1931.5],
      [1209.4375, 2357.5],
      [825.4375, 2467.5],
      [702.4375, 2040.5]
    ];
    const memorialChapelPolygon = L.polygon(memorialChapelCoords, defaultPolygonStyle).addTo(map);
    polygons.memorialChapel = memorialChapelPolygon;
    memorialChapelPolygon.on('click', handlePolygonClick('/plots/memorial-chapel', 'Memorial Chapel and Administration', 'memorialChapelRects'));

    // Heritage Gardens polygon
    const heritageGardensCoords = [
      [1469.4375, 2446.5],
      [2086.4375, 2446.5],
      [2086.4375, 2721.5],
      [1469.4375, 2721.5]
    ];
    const heritageGardensPolygon = L.polygon(heritageGardensCoords, defaultPolygonStyle).addTo(map);
    polygons.heritageGardens = heritageGardensPolygon;
    heritageGardensPolygon.on('click', handlePolygonClick('/plots/heritage-gardens', 'Heritage Gardens', 'heritageGardensRects'));

    // Veterans Memorial polygon
    const veteransMemorialCoords = [
      [1518.875, 2927.5],
      [2145.4375, 2927.5],
      [2145.4375, 3577],
      [1518.875, 3577]
    ];
    const veteransMemorialPolygon = L.polygon(veteransMemorialCoords, defaultPolygonStyle).addTo(map);
    polygons.veteransMemorial = veteransMemorialPolygon;
    veteransMemorialPolygon.on('click', handlePolygonClick('/plots/veterans-memorial', 'Veterans Memorial', 'veteransMemorialRects'));

    // Serenity Columbarium polygon
    const serenityColumbariumCoords = [
      [1262.875, 2927],
      [1264.875, 3577],
      [644.875, 3577],
      [642.875, 2927]
    ];
    const serenityColumbariumPolygon = L.polygon(serenityColumbariumCoords, defaultPolygonStyle).addTo(map);
    polygons.serenityColumbarium = serenityColumbariumPolygon;
  serenityColumbariumPolygon.on('click', handlePolygonClick('/plots/serenity-columbarium', 'Serenity Columbarium', 'serenityColumbariumRects'));

  </script>
</body>
</html>
