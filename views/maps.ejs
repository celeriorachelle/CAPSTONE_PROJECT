<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Everlasting Peace Memorial</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/stylesheets/maps.css">
</head>
<body>
  <div class="home-button">
  <button onclick="goHome()"><i class="fas fa-home"></i> Home</button>
</div>

  <div class="container">
    <div class="header">
      <h1><i class="fas fa-cross"></i> Everlasting Peace Memorial Cemetery Plot Management</h1>
      <p>Manage and track cemetery plots with ease</p>
    </div>

    <div class="main-content">
      <div class="cemetery-section">
        <div class="search-box">
          <input type="text" id="searchInput" placeholder="Search by plot number or person name...">
          <i class="fas fa-search"></i>
        </div>

        <div class="cemetery-grid" id="cemeteryGrid"></div>

        <div class="legend">
      <h3>Categories</h3>
      <div class="legend-item"><button class="category-btn" data-category="all">All</button></div>
      <div class="legend-item"><button class="category-btn" data-category="heritage">Heritage Gardens</button></div>
      <div class="legend-item"><button class="category-btn" data-category="family">Family Estates</button></div>
      <div class="legend-item"><button class="category-btn" data-category="columbarium">Serenity Columbarium</button></div>
      <div class="legend-item"><button class="category-btn" data-category="veterans">Veterans Memorial</button></div>
      <div class="legend-item"><button class="category-btn" data-category="chapel">Memorial Chapel & Administration</button></div>

      <h3>Status</h3>
     <div class="legend-item"><span class="legend-color available"></span> Available</div>
     <div class="legend-item"><span class="legend-color reserved"></span> Reserved</div>
    <div class="legend-item"><span class="legend-color occupied"></span> Occupied</div>
      </div>
    <div class="sidebar">
        <h2><i class="fas fa-info-circle"></i> Plot Information</h2>
        <div class="stats">
          <div class="stat-card">
            <div class="stat-number" id="availableCount">0</div>
            <div class="stat-label">Available</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="reservedCount">0</div>
            <div class="stat-label">Reserved</div>
          </div>
          <div class="stat-card">
            <div class="stat-number" id="occupiedCount">0</div>
            <div class="stat-label">Occupied</div>
          </div>
        </div>

        <div class="plot-details" id="plotDetails">
          <p style="text-align: center; color: #666; font-style: italic;">
            <i class="fas fa-mouse-pointer"></i><br>
            Click on a plot to view details
          </p>
        </div>
      </div>
    </div>
  </div>

  <div id="plotModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modalTitle">Edit Plot Details</h2>
        <span class="close">&times;</span>
      </div>
      <form id="plotForm">
        <div class="form-group">
          <label for="plotStatus">Status:</label>
          <select id="plotStatus" required>
            <option value="available">Available</option>
            <option value="reserved">Reserved</option>
            <option value="occupied">Occupied</option>
          </select>
        </div>
        <div class="form-group">
          <label for="personName">Person Name:</label>
          <input type="text" id="personName" placeholder="Enter full name">
        </div>
        <div class="form-group">
          <label for="birthDate">Birth Date:</label>
          <input type="date" id="birthDate">
        </div>
        <div class="form-group">
          <label for="deathDate">Death Date:</label>
          <input type="date" id="deathDate">
        </div>
        <div class="form-group">
          <label for="contactInfo">Contact Information:</label>
          <input type="text" id="contactInfo" placeholder="Phone or email">
        </div>
        <div class="form-group">
          <label for="notes">Notes:</label>
          <textarea id="notes" rows="3" placeholder="Additional information..."></textarea>
        </div>
        <div class="action-buttons">
          <button type="button" class="btn btn-danger" id="cancelBtn">Cancel</button>
          <button type="submit" class="btn btn-primary">Save Changes</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    function goHome() {
  window.location.href = '/'; // change '/' to your actual home page URL
}
class CemeteryManager {
  constructor() {
    this.plots = {};
    this.totalPlots = 100;
    this.currentFilter = 'all'; // status filter: all, available, reserved, occupied
    this.currentCategory = 'all'; // category filter
    this.selectedPlot = null;
    this.categories = ['heritage','family','columbarium','veterans','chapel'];
    this.initializePlots();
    this.renderGrid();
    this.bindEvents();
    this.updateStats();
  }

  initializePlots() {
    for (let i = 1; i <= this.totalPlots; i++) {
      const category = this.categories[Math.floor((i-1)/20)];
      this.plots[i] = {
        id: i,
        status: 'available',
        category: category,
        name: '',
        birth: '',
        death: '',
        contact: '',
        notes: ''
      };
    }
    // Example reserved/occupied plots
    this.plots[5].status = 'occupied';
    this.plots[12].status = 'reserved';
    this.plots[23].status = 'occupied';
  }

  renderGrid() {
    const grid = document.getElementById('cemeteryGrid');
    grid.innerHTML = '';

    for (let i = 1; i <= this.totalPlots; i++) {
      const plot = this.plots[i];
      const plotElement = document.createElement('div');
      plotElement.className = `plot ${plot.status} ${plot.category}`;
      plotElement.textContent = i;
      plotElement.dataset.plotId = i;

      // Apply filters
      if (
        (this.currentFilter !== 'all' && plot.status !== this.currentFilter) ||
        (this.currentCategory !== 'all' && plot.category !== this.currentCategory)
      ) {
        plotElement.style.display = 'none';
      } else {
        plotElement.style.display = 'block';
      }

      plotElement.addEventListener('click', () => this.selectPlot(i));
      plotElement.addEventListener('dblclick', () => this.openModal(i));
      grid.appendChild(plotElement);
    }

    // Update stats based on current category filter
    this.updateStats();
  }

  selectPlot(plotId) {
    document.querySelectorAll('.plot.highlighted').forEach(plot => plot.classList.remove('highlighted'));
    const plotElement = document.querySelector(`[data-plot-id="${plotId}"]`);
    plotElement.classList.add('highlighted');
    this.selectedPlot = plotId;
    this.displayPlotDetails(plotId);
  }

  displayPlotDetails(plotId) {
    const plot = this.plots[plotId];
    const detailsContainer = document.getElementById('plotDetails');
    const statusClass = `status-${plot.status}`;

    detailsContainer.innerHTML = `
      <div class="detail-row"><span class="detail-label">Plot Number:</span><span class="detail-value">#${plot.id}</span></div>
      <div class="detail-row"><span class="detail-label">Status:</span><span class="detail-value"><span class="status-badge ${statusClass}">${plot.status}</span></span></div>
      ${plot.name ? `<div class="detail-row"><span class="detail-label">Name:</span><span class="detail-value">${plot.name}</span></div>` : ''}
      ${plot.birth ? `<div class="detail-row"><span class="detail-label">Birth Date:</span><span class="detail-value">${new Date(plot.birth).toLocaleDateString()}</span></div>` : ''}
      ${plot.death ? `<div class="detail-row"><span class="detail-label">Death Date:</span><span class="detail-value">${new Date(plot.death).toLocaleDateString()}</span></div>` : ''}
      ${plot.contact ? `<div class="detail-row"><span class="detail-label">Contact:</span><span class="detail-value">${plot.contact}</span></div>` : ''}
      ${plot.notes ? `<div class="detail-row"><span class="detail-label">Notes:</span><span class="detail-value">${plot.notes}</span></div>` : ''}
    `;
  }

  filterPlots(filter) {
    this.currentFilter = filter;
    document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-filter="${filter}"]`).classList.add('active');
    this.renderGrid();
  }

  filterByCategory(category) {
    this.currentCategory = category;
    document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelector(`[data-category="${category}"]`)?.classList.add('active');
    this.renderGrid();
  }

  updateStats() {
    let stats = { available: 0, reserved: 0, occupied: 0 };
    Object.values(this.plots).forEach(plot => {
      if (this.currentCategory === 'all' || plot.category === this.currentCategory) {
        stats[plot.status]++;
      }
    });
    document.getElementById('availableCount').textContent = stats.available;
    document.getElementById('reservedCount').textContent = stats.reserved;
    document.getElementById('occupiedCount').textContent = stats.occupied;
  }

  bindEvents() {
    document.getElementById('searchInput').addEventListener('input', (e) => this.searchPlots(e.target.value));
    document.querySelectorAll('.filter-btn').forEach(btn => btn.addEventListener('click', () => this.filterPlots(btn.dataset.filter)));
    document.querySelectorAll('.category-btn').forEach(btn => btn.addEventListener('click', () => this.filterByCategory(btn.dataset.category)));
    document.querySelector('.close').addEventListener('click', () => this.closeModal());
    document.getElementById('cancelBtn').addEventListener('click', () => this.closeModal());
    document.getElementById('plotForm').addEventListener('submit', (e) => { e.preventDefault(); this.savePlotDetails(); });
    window.addEventListener('click', (e) => { if (e.target === document.getElementById('plotModal')) this.closeModal(); });
  }

  searchPlots(query) {
    query = query.toLowerCase();
    Object.values(this.plots).forEach(plot => {
      const el = document.querySelector(`[data-plot-id="${plot.id}"]`);
      const match = plot.id.toString().includes(query) || plot.name.toLowerCase().includes(query);
      el.style.display = match ? 'block' : 'none';
    });
    this.updateStats();
  }

  // ... add openModal, closeModal, savePlotDetails, changePlotStatus functions as before ...
}

const cemeteryManager = new CemeteryManager();
  </script>
</body>
</html>
