<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Create Appointment | Everlasting Peace Memorial Park</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <link rel="stylesheet" href="/stylesheets/admincreateb.css">
  </head>
<body>
  <!-- Enhanced Admin Header -->
  <header class="admin-header">
    <h1>Admin Dashboard</h1>
    <nav>
      <ul>
         <li><a href="/admin" class="active"><i class="fas fa-home"></i> Home</a></li>
        <li><a href="/adminviewapp"><i class="fas fa-calendar-alt"></i> Appointments</a></li>
        <li><a href="/burialrecord"><i class="fas fa-book"></i> Bookings</a></li>
        <li><a href="/reports"><i class="fas fa-chart-bar"></i> Reports</a></li>
        <li><a href="/login/logout"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
      </ul>
    </nav>
  </header>

  <main class="admin-main">
    <!-- Enhanced Sidebar from View Appointments -->
    <aside class="sidebar">
      <h3><i class="fas fa-tachometer-alt"></i> Dashboard Menu</h3>
      <ul>
        <li><a href="/admin" class="active"><i class="fas fa-home"></i> Dashboard Home</a></li>
        <li><a href="/admincreateb"><i class="fas fa-plus-circle"></i> Create Appointment</a></li>
        <li><a href="/adminviewapp"><i class="fas fa-list"></i> View Appointments</a></li>
        <li><a href="/burialrecord"><i class="fas fa-book"></i> Burial Records</a></li>
        <li><a href="/maps"><i class="fas fa-map"></i> Cemetery Map</a></li>
        <li><a href="/admin_inventory"><i class="fas fa-clipboard-list"></i> Inventory</a></li>
        <li><a href="/admin_logs"><i class="fas fa-clipboard-list"></i> Logs</a></li>
      </ul>

      <h3><i class="fas fa-cog"></i> Appointment Tools</h3>
      <div class="appointment-sections">
        <button onclick="showQuickForm()" class="active" id="quick-form">
          <i class="fas fa-bolt"></i> Quick Booking
        </button>
        <button onclick="showAdvancedForm()" id="advanced-form">
          <i class="fas fa-cogs"></i> Advanced Options
        </button>
        <button onclick="showTemplates()" id="templates">
          <i class="fas fa-file-alt"></i> Use Template
        </button>
        <button onclick="showBulkCreate()" id="bulk-create">
          <i class="fas fa-layer-group"></i> Bulk Create
        </button>
      </div>

      <h3><i class="fas fa-chart-line"></i> Quick Stats</h3>
      <div class="appointment-sections">
        <button onclick="showTodayStats()" style="background: rgba(40, 167, 69, 0.2); color: #155724;">
          <i class="fas fa-calendar-day"></i> Today: 8 Appointments
        </button>
        <button onclick="showWeekStats()">
          <i class="fas fa-calendar-week"></i> This Week: 23
        </button>
        <button onclick="showAvailableSlots()">
          <i class="fas fa-clock"></i> Available Slots: 12
        </button>
      </div>
    </aside>

    <!-- Enhanced Main Content -->
    <section class="content">
      <h2><i class="fas fa-calendar-plus"></i> Create New Appointment</h2>
      
      <div class="appointment-form">
        <h1><i class="fas fa-calendar-plus"></i> Schedule Appointment</h1>
        <p class="form-subtitle">Please fill in the details below to book your appointment</p>
        
        <div class="success-message" id="successMessage">
          <i class="fas fa-check-circle"></i> Appointment successfully created!
        </div>

        <form id="appointmentForm" method="POST" action="/admincreateb">
          <div class="form-grid">
            <div class="form-group">
              <label for="fullname">
                <i class="fas fa-user"></i> Full Name *
              </label>
              <input type="text" id="fullname" name="fullname" required placeholder="Enter your full name" />
              <div class="error-message" id="fullnameError"></div>
            </div>

            <div class="form-group">
              <label for="phone">
                <i class="fas fa-phone"></i> Phone Number *
              </label>
              <input type="tel" id="phone" name="phone" required placeholder="(123) 456-7890" />
              <div class="error-message" id="phoneError"></div>
            </div>

            <div class="form-group">
              <label for="email">
                <i class="fas fa-envelope"></i> Email Address
              </label>
              <input type="email" id="email" name="email" placeholder="your.email@example.com" />
              <div class="error-message" id="emailError"></div>
            </div>

            <div class="form-group">
              <label for="service">
                <i class="fas fa-concierge-bell"></i> Service Type *
              </label>
              <select id="service" name="service" required>
                <option value="" disabled selected>Select Service</option>
                <option value="burial">🏛️ Burial Service</option>
                <option value="lot-inquiry">🏞️ Lot Inquiry</option>
                <option value="transfer">📋 Transfer Request</option>
                <option value="memorial">🌹 Memorial Service</option>
                <option value="maintenance">🔧 Maintenance Request</option>
                <option value="other">📝 Other</option>
              </select>
              <div class="error-message" id="serviceError"></div>
            </div>

            <div class="form-group">
              <label for="date">
                <i class="fas fa-calendar"></i> Date of Appointment *
              </label>
              <input type="date" id="date" name="date" required />
              <div class="error-message" id="dateError"></div>
            </div>

            <div class="form-group">
              <label for="time">
                <i class="fas fa-clock"></i> Preferred Time *
              </label>
              <select id="time" name="time" required>
                <option value="" disabled selected>Select Time</option>
                <option value="09:00">🌅 9:00 AM</option>
                <option value="10:00">🌄 10:00 AM</option>
                <option value="11:00">☀️ 11:00 AM</option>
                <option value="13:00">🌞 1:00 PM</option>
                <option value="14:00">🌤️ 2:00 PM</option>
                <option value="15:00">🌇 3:00 PM</option>
                <option value="16:00">🌆 4:00 PM</option>
              </select>
              <div class="error-message" id="timeError"></div>
            </div>

            <div class="form-group full-width">
              <label for="notes">
                <i class="fas fa-sticky-note"></i> Additional Notes
              </label>
              <textarea id="notes" name="notes" rows="4" placeholder="Any special requests or additional information..."></textarea>
            </div>
          </div>

          <div class="form-actions">
            <button type="button" class="btn btn-clear" id="clearBtn">
              <i class="fas fa-eraser"></i> Clear Form
            </button>
            <button type="button" class="btn btn-ai" id="aiBtn">
              <i class="fas fa-robot"></i> AI Suggestions
            </button>
            <button type="submit" class="btn btn-submit" id="submitBtn">
              <i class="fas fa-calendar-check"></i> Book Appointment
            </button>
          </div>
        </form>
      </div>
    </section>
  </main>
   <footer>
        <%- include('partials/footer') %>
    </footer>

  <!-- AI Suggestions Modal -->
  <div id="aiModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3><i class="fas fa-robot"></i> AI Suggestions</h3>
        <span class="close" id="closeModal">&times;</span>
      </div>
      <div id="suggestionsList">
        <div class="suggestion-item" data-service="burial" data-time="10:00">
          <div class="suggestion-title">🌅 Morning Burial Service</div>
          <div class="suggestion-desc">Recommended for peaceful ceremonies with better weather conditions and optimal lighting</div>
        </div>
        <div class="suggestion-item" data-service="lot-inquiry" data-time="14:00">
          <div class="suggestion-title">🌞 Afternoon Lot Viewing</div>
          <div class="suggestion-desc">Perfect lighting for viewing available plots and memorial sites with clear visibility</div>
        </div>
        <div class="suggestion-item" data-service="memorial" data-time="09:00">
          <div class="suggestion-title">🌄 Early Memorial Planning</div>
          <div class="suggestion-desc">Quiet morning hours ideal for detailed memorial service planning and consultation</div>
        </div>
        <div class="suggestion-item" data-service="maintenance" data-time="11:00">
          <div class="suggestion-title">🔧 Mid-Morning Maintenance</div>
          <div class="suggestion-desc">Optimal time for site inspections and maintenance discussions with full daylight</div>
        </div>
      </div>
    </div>
  </div>

  <script>
    class AppointmentManager {
      constructor() {
        this.form = document.getElementById('appointmentForm');
        this.initializeEventListeners();
        this.setMinDate();
        this.loadSavedData();
      }

      initializeEventListeners() {
        // Form submission
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
        
        // Button events
        document.getElementById('clearBtn').addEventListener('click', () => this.clearForm());
        document.getElementById('aiBtn').addEventListener('click', () => this.showAISuggestions());
        document.getElementById('closeModal').addEventListener('click', () => this.closeModal());
        
        // Real-time validation
        this.form.querySelectorAll('input, select, textarea').forEach(field => {
          field.addEventListener('blur', () => this.validateField(field));
          field.addEventListener('input', () => this.clearFieldError(field));
        });

        // Phone number formatting
        document.getElementById('phone').addEventListener('input', (e) => this.formatPhoneNumber(e));
        
        // Auto-save form data
        this.form.addEventListener('input', () => this.saveFormData());

        // Modal events
        window.addEventListener('click', (e) => {
          if (e.target === document.getElementById('aiModal')) {
            this.closeModal();
          }
        });

        // AI suggestion selection
        document.querySelectorAll('.suggestion-item').forEach(item => {
          item.addEventListener('click', () => this.applySuggestion(item));
        });
      }

      setMinDate() {
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        document.getElementById('date').min = tomorrow.toISOString().split('T')[0];
      }

      validateField(field) {
        const value = field.value.trim();
        const fieldName = field.name;
        let isValid = true;
        let errorMessage = '';

        switch (fieldName) {
          case 'fullname':
            if (!value) {
              errorMessage = 'Full name is required';
              isValid = false;
            } else if (value.length < 2) {
              errorMessage = 'Name must be at least 2 characters';
              isValid = false;
            }
            break;

          case 'phone':
            const phoneRegex = /^$$\d{3}$$ \d{3}-\d{4}$/;
            if (!value) {
              errorMessage = 'Phone number is required';
              isValid = false;
            } else if (!phoneRegex.test(value)) {
              errorMessage = 'Please enter a valid phone number';
              isValid = false;
            }
            break;

          case 'email':
            if (value && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
              errorMessage = 'Please enter a valid email address';
              isValid = false;
            }
            break;

          case 'date':
            if (!value) {
              errorMessage = 'Appointment date is required';
              isValid = false;
            } else {
              const selectedDate = new Date(value);
              const today = new Date();
              if (selectedDate <= today) {
                errorMessage = 'Please select a future date';
                isValid = false;
              }
            }
            break;

          case 'service':
          case 'time':
            if (!value) {
              errorMessage = `${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)} is required`;
              isValid = false;
            }
            break;
        }

        this.showFieldError(field, errorMessage, !isValid);
        return isValid;
      }

      showFieldError(field, message, hasError) {
        const formGroup = field.closest('.form-group');
        const errorElement = formGroup.querySelector('.error-message');
        
        if (hasError) {
          formGroup.classList.add('error');
          formGroup.classList.remove('success');
          errorElement.textContent = message;
        } else {
          formGroup.classList.remove('error');
          formGroup.classList.add('success');
          errorElement.textContent = '';
        }
      }

      clearFieldError(field) {
        const formGroup = field.closest('.form-group');
        formGroup.classList.remove('error');
        const errorElement = formGroup.querySelector('.error-message');
        errorElement.textContent = '';
      }

      formatPhoneNumber(e) {
        let value = e.target.value.replace(/\D/g, '');
        if (value.length >= 6) {
          value = `(${value.slice(0, 3)}) ${value.slice(3, 6)}-${value.slice(6, 10)}`;
        } else if (value.length >= 3) {
          value = `(${value.slice(0, 3)}) ${value.slice(3)}`;
        }
        e.target.value = value;
      }

      handleSubmit(e) {
        // Validate all fields
        let isFormValid = true;
        const requiredFields = this.form.querySelectorAll('[required]');
        
        requiredFields.forEach(field => {
          if (!this.validateField(field)) {
            isFormValid = false;
          }
        });

        if (!isFormValid) {
          e.preventDefault();
          this.showNotification('Please correct the errors above', 'error');
          return;
        }

        // Show loading state
        const submitBtn = document.getElementById('submitBtn');
        submitBtn.classList.add('loading');
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';

        // Allow form to submit naturally to the server
        this.showNotification('Creating appointment...', 'info');
      }

      clearForm() {
        this.form.reset();
        document.getElementById('successMessage').style.display = 'none';
        
        // Clear all validation states
        this.form.querySelectorAll('.form-group').forEach(group => {
          group.classList.remove('error', 'success');
        });
        
        this.form.querySelectorAll('.error-message').forEach(error => {
          error.textContent = '';
        });

        this.clearSavedData();
        this.showNotification('Form cleared successfully', 'info');
      }

      showAISuggestions() {
        document.getElementById('aiModal').style.display = 'block';
      }

      closeModal() {
        document.getElementById('aiModal').style.display = 'none';
      }

      applySuggestion(suggestionElement) {
        const service = suggestionElement.dataset.service;
        const time = suggestionElement.dataset.time;
        
        if (service) {
          document.getElementById('service').value = service;
        }
        if (time) {
          document.getElementById('time').value = time;
        }
        
        this.closeModal();
        this.showNotification('AI suggestion applied successfully!', 'success');
      }

      saveFormData() {
        const formData = new FormData(this.form);
        const data = Object.fromEntries(formData);
        localStorage.setItem('appointmentFormData', JSON.stringify(data));
      }

      loadSavedData() {
        const savedData = localStorage.getItem('appointmentFormData');
        if (savedData) {
          const data = JSON.parse(savedData);
          Object.keys(data).forEach(key => {
            const field = document.getElementById(key);
            if (field && data[key]) {
              field.value = data[key];
            }
          });
        }
      }

      clearSavedData() {
        localStorage.removeItem('appointmentFormData');
      }

      showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
          <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
          ${message}
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.style.animation = 'slideOutRight 0.3s ease';
          setTimeout(() => notification.remove(), 300);
        }, 3000);
      }
    }

    // Global functions for sidebar interactions
    function showQuickForm() {
      updateActiveButton('quick-form');
      new AppointmentManager().showNotification('Quick booking mode activated', 'info');
    }

    function showAdvancedForm() {
      updateActiveButton('advanced-form');
      new AppointmentManager().showNotification('Advanced options coming soon...', 'info');
    }

    function showTemplates() {
      updateActiveButton('templates');
      new AppointmentManager().showNotification('Template selection coming soon...', 'info');
    }

    function showBulkCreate() {
      updateActiveButton('bulk-create');
      new AppointmentManager().showNotification('Bulk creation feature coming soon...', 'info');
    }

    function showTodayStats() {
      new AppointmentManager().showNotification('Today: 8 appointments scheduled', 'info');
    }

    function showWeekStats() {
      new AppointmentManager().showNotification('This week: 23 appointments total', 'info');
    }

    function showAvailableSlots() {
      new AppointmentManager().showNotification('12 available time slots remaining today', 'success');
    }

    function updateActiveButton(activeId) {
      document.querySelectorAll('.appointment-sections button').forEach(btn => {
        btn.classList.remove('active');
      });
      document.getElementById(activeId).classList.add('active');
    }

    // Initialize the appointment manager when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new AppointmentManager();
    });
  </script>
</body>
</html>