<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Create Appointment | Everlasting Peace Memorial Park</title>

  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

  <!-- Main Admin CSS -->
  <link rel="stylesheet" href="/stylesheets/admin.css" />
  <link rel="stylesheet" href="/stylesheets/admincreateb.css" />

  <style>
    /* Basic form styling added inline for quick preview */
    .form-card { max-width: 960px; margin: 0 auto; padding: 22px; background:#fff; border-radius:10px; box-shadow:0 6px 18px rgba(0,0,0,0.06); }
    .form-grid { display:grid; grid-template-columns:1fr 1fr; gap:18px; }
    .form-group.full-width { grid-column: 1 / -1; }
    label { display:block; font-weight:600; margin-bottom:6px; color:#222; }
    input, select, textarea { width:100%; padding:9px 10px; border:1px solid #d0d7de; border-radius:6px; font-size:14px; background:#fafbfc; }
    input:focus, select:focus, textarea:focus { outline:none; border-color:#4a90e2; box-shadow:0 4px 12px rgba(74,144,226,0.08); }
    .btn { padding:10px 14px; border-radius:8px; border:none; cursor:pointer; font-weight:700; }
    .btn-primary { background:#0b74de; color:#fff; }
    .btn-secondary { background:#eef2f6; color:#0b74de; }
    .error-message { color:#b00020; font-size:13px; margin-top:6px; }
    .success-message { background:#e9f7ef; color:#0b662a; padding:8px 12px; border-radius:6px; margin-bottom:12px; }
    #toast { right:20px; bottom:20px; }
    @media (max-width:800px) { .form-grid { grid-template-columns:1fr; } }
  </style>
</head>
<body>
  <!-- ===== HEADER (Topbar + Hamburger) ===== -->
  <%- include('partials/admin/topbar', { activePage: 'createAppointment' }) %>
  <div style="height: 120px;"></div> <!-- Spacer for fixed header -->

  <!-- ===== MAIN LAYOUT ===== -->
  <main class="admin-main">
    <!-- Sidebar -->
    <%- include('partials/admin/sidebar', { activePage: 'createAppointment' }) %>

    <!-- ===== CONTENT AREA ===== -->
    <section class="content">
      <!-- Topbar -->
      <header class="topbar">
        <div class="topbar-left">
          <h2>Create New Appointment</h2>
          <div class="date-time" id="currentDateTime"></div>
        </div>
        <div class="icons">
          <!-- Notification Bell -->
          <button class="notification-btn" id="notificationBtn">
            <i class="fas fa-bell"></i>
            <span class="notification-badge" id="notificationCount">0</span>
          </button>

          <!-- Notification Dropdown -->
          <div class="notification-dropdown" id="notificationDropdown">
            <header>Notifications</header>
            <ul id="notificationList">
              <li>Loading notifications...</li>
            </ul>
          </div>
        </div>
      </header>

      <!-- ===== FORM SECTION ===== -->
      <div class="form-card">
        <p class="form-subtitle">Please fill in the details below to book an appointment.</p>

        <% if (typeof success !== 'undefined' && success) { %>
          <div class="success-message" id="successMessage">Appointment successfully created! Booking ID: <%= bookingId %></div>
        <% } else { %>
          <div class="success-message" id="successMessage" style="display:none;">Appointment successfully created!</div>
        <% } %>
        <% if (typeof error !== 'undefined' && error) { %>
          <div class="error-message" style="display:block;margin-bottom:1rem;color:#b00020;"><%= error %></div>
        <% } %>

        <% const F = (typeof form !== 'undefined') ? form : {}; %>

        <form id="appointmentForm" method="POST" action="/admincreateb">
          <div class="form-grid">
            <div class="form-group">
              <label for="firstName">First Name *</label>
              <input type="text" id="firstName" name="firstName" required placeholder="Enter first name" value="<%= F.firstName || '' %>" />
              <div class="error-message" id="firstNameError"></div>
            </div>
            <div class="form-group">
              <label for="lastName">Last Name *</label>
              <input type="text" id="lastName" name="lastName" required placeholder="Enter last name" value="<%= F.lastName || '' %>" />
              <div class="error-message" id="lastNameError"></div>
            </div>

            <div class="form-group">
              <label for="phone">Phone Number *</label>
              <input type="tel" id="phone" name="phone" required placeholder="(123) 456-7890" />
              <div class="error-message" id="phoneError"></div>
            </div>

            <div class="form-group">
              <label for="email">Email Address</label>
              <input type="email" id="email" name="email" placeholder="your.email@example.com" value="<%= F.email || '' %>" />
              <div class="error-message" id="emailError"></div>
              <label for="service">Service Type *</label>
              <select id="service" name="service" required>
                <option value="" disabled <%= !F.service ? 'selected' : '' %>>Select Service</option>
                <option value="burial" <%= (F.service === 'burial') ? 'selected' : '' %>>Burial Service</option>
                <option value="memorial" <%= (F.service === 'memorial') ? 'selected' : '' %>>Memorial Service</option>
                <option value="plot" <%= (F.service === 'plot') ? 'selected' : '' %>>Plot Booking</option>
              </select>
              <div class="error-message" id="serviceError"></div>
            </div>

            <div class="form-group" id="plotGroup" style="display:none">
              <label for="plot_id">Plot *</label>
              <select id="plot_id" name="plot_id">
                <option value="" <%= !F.plot_id ? 'selected' : '' %> >-- No plot --</option>
                <% if (typeof plots !== 'undefined' && Array.isArray(plots)) { %>
                  <% plots.forEach(p => { %>
                    <option value="<%= p.plot_id %>" <%= (Number(F.plot_id) === p.plot_id) ? 'selected' : '' %>>Plot <%= p.plot_number %> — <%= p.location %> (₱<%= p.price %>)</option>
                  <% }) %>
                <% } %>
              </select>
              <div class="error-message" id="plotError"></div>
            </div>

            <div class="form-group" id="paymentGroup" style="display:none">
              <label for="payment_method">Payment Received?</label>
              <select id="payment_method" name="payment_method">
                <option value="none" <%= (!F.payment_method || F.payment_method === 'none') ? 'selected' : '' %>>No (record later)</option>
                <option value="cash" <%= (F.payment_method === 'cash') ? 'selected' : '' %>>Cash (record now)</option>
              </select>
            </div>

            <div class="form-group" id="cashFields" style="display:none">
              <label for="payment_option">Payment Option</label>
              <select id="payment_option" name="payment_option">
                <option value="fullpayment">Full Payment</option>
                <option value="downpayment">Downpayment (installment)</option>
              </select>
              <div id="downFields" style="display:none;margin-top:8px">
                <label for="months">Months</label>
                <input type="number" min="1" id="months" name="months" placeholder="e.g., 12" value="<%= F.months || '' %>" />
              </div>
            </div>

            <div class="form-group">
              <label for="date">Date of Appointment *</label>
              <input type="date" id="date" name="date" required value="<%= F.date || '' %>" />
              <div class="error-message" id="dateError"></div>
            </div>

            <div class="form-group">
              <label for="time">Preferred Time *</label>
              <select id="time" name="time" required>
                <option value="" disabled <%= !F.time ? 'selected' : '' %>>Select Time</option>
                <option value="09:00" <%= (F.time === '09:00') ? 'selected' : '' %>>9:00 AM</option>
                <option value="10:00" <%= (F.time === '10:00') ? 'selected' : '' %>>10:00 AM</option>
                <option value="11:00" <%= (F.time === '11:00') ? 'selected' : '' %>>11:00 AM</option>
                <option value="13:00" <%= (F.time === '13:00') ? 'selected' : '' %>>1:00 PM</option>
                <option value="14:00" <%= (F.time === '14:00') ? 'selected' : '' %>>2:00 PM</option>
                <option value="15:00" <%= (F.time === '15:00') ? 'selected' : '' %>>3:00 PM</option>
                <option value="16:00" <%= (F.time === '16:00') ? 'selected' : '' %>>4:00 PM</option>
              </select>
              <div class="error-message" id="timeError"></div>
            </div>

            <!-- Deceased info for burial (only shown when service=burial) -->
            <div class="form-group" id="deceasedFields" style="<%= (F.service === 'burial') ? 'display:block' : 'display:none' %>">
              <label>Deceased Details (for Burial)</label>
              <input type="text" id="deceased_firstName" name="deceased_firstName" placeholder="Deceased First Name" value="<%= F.deceased_firstName || '' %>" />
              <input type="text" id="deceased_lastName" name="deceased_lastName" placeholder="Deceased Last Name" style="margin-top:6px" value="<%= F.deceased_lastName || '' %>" />
              <label for="birth_date">Birth Date</label>
              <input type="date" id="birth_date" name="birth_date" value="<%= F.birth_date || '' %>" />
              <label for="death_date">Death Date</label>
              <input type="date" id="death_date" name="death_date" value="<%= F.death_date || '' %>" />
              <div class="error-message" id="deceasedError"></div>
            </div>

            <div class="form-group full-width">
              <label for="notes">Additional Notes</label>
              <textarea id="notes" name="notes" rows="4" placeholder="Any special requests or details..."><%= F.notes || '' %></textarea>
            </div>
          </div>

          <div class="form-actions">
            <button type="button" class="btn btn-secondary" id="clearBtn">Clear Form</button>
            <button type="submit" class="btn btn-primary" id="submitBtn">Create Appointment</button>
          </div>
        </form>
      </div>
    </section>
  </main>

  <!-- ===== TOAST NOTIFICATION ===== -->
  <div id="toast" class="toast">
    <i class="fas fa-bell"></i>
    <span id="toastMessage">New Notification</span>
  </div>

  <!-- ===== SCRIPTS ===== -->
  <script>
    window.addEventListener('DOMContentLoaded', function() {
      // Query all elements after DOM is loaded
      const serviceEl = document.getElementById('service');
      const plotGroup = document.getElementById('plotGroup');
      const paymentGroup = document.getElementById('paymentGroup');
      const cashFields = document.getElementById('cashFields');
      const deceasedFields = document.getElementById('deceasedFields');
      const plotEl = document.getElementById('plot_id');
      const paymentMethodEl = document.getElementById('payment_method');
      const cashAmountEl = document.getElementById('cash_amount');
      const paymentOptionEl = document.getElementById('payment_option');
      const downFields = document.getElementById('downFields');
      const monthlyAmountEl = document.getElementById('monthly_amount');
      const monthsEl = document.getElementById('months');
      const timeEl = document.getElementById('time');
      const deceasedFirstEl = document.getElementById('deceased_firstName');
      const deceasedLastEl = document.getElementById('deceased_lastName');
      const birthDateEl = document.getElementById('birth_date');
      const deathDateEl = document.getElementById('death_date');
      const appointmentFormEl = document.getElementById('appointmentForm');
      const clearBtnEl = document.getElementById('clearBtn');

      function updatePaymentOption() {
        if (!paymentOptionEl) return;
        if (paymentOptionEl.value === 'downpayment') {
          downFields.style.display = 'block';
          monthlyAmountEl.required = true;
          monthsEl.required = true;
          cashAmountEl.required = true;
        } else {
          downFields.style.display = 'none';
          monthlyAmountEl.required = false;
          monthsEl.required = false;
          cashAmountEl.required = true;
        }
      }

      function updateFormState() {
        const svc = serviceEl ? serviceEl.value : '';
        // Hide all by default
        if (plotGroup) plotGroup.style.display = 'none';
        if (paymentGroup) paymentGroup.style.display = 'none';
        if (cashFields) cashFields.style.display = 'none';
        if (deceasedFields) deceasedFields.style.display = 'none';
        if (plotEl) plotEl.required = false;
        if (timeEl) timeEl.required = false;
        if (cashAmountEl) cashAmountEl.required = false;

        if (svc === 'burial') {
          if (plotGroup) plotGroup.style.display = 'block';
          if (paymentGroup) paymentGroup.style.display = 'block';
          if (cashFields) cashFields.style.display = 'block';
          if (deceasedFields) deceasedFields.style.display = 'block';
          if (plotEl) plotEl.required = true;
          if (timeEl) timeEl.required = true;
          if (cashAmountEl) cashAmountEl.required = true;
        } else if (svc === 'plot') {
          if (plotGroup) plotGroup.style.display = 'block';
          if (paymentGroup) paymentGroup.style.display = 'block';
          if (paymentMethodEl && paymentMethodEl.value === 'cash') {
            if (cashFields) cashFields.style.display = 'block';
            if (cashAmountEl) cashAmountEl.required = true;
          }
          if (plotEl) plotEl.required = true;
        } else if (svc === 'memorial') {
          if (timeEl) timeEl.required = true;
        }
      }

      // Attach listeners
      if (serviceEl) {
        serviceEl.addEventListener('change', updateFormState);
        serviceEl.addEventListener('input', updateFormState);
      }
      if (paymentMethodEl) {
        paymentMethodEl.addEventListener('change', function() {
          updateFormState();
        });
        paymentMethodEl.addEventListener('input', function() {
          updateFormState();
        });
      }
      if (paymentOptionEl) paymentOptionEl.addEventListener('change', updatePaymentOption);

      // Clear form button
      if (clearBtnEl && appointmentFormEl) {
        clearBtnEl.addEventListener('click', function() {
          appointmentFormEl.reset();
          if (plotGroup) plotGroup.style.display = 'none';
          if (paymentGroup) paymentGroup.style.display = 'none';
          if (cashFields) cashFields.style.display = 'none';
          if (deceasedFields) deceasedFields.style.display = 'none';
        });
      }

      // Initial state
      updateFormState();
      updatePaymentOption();

      if (appointmentFormEl) {
        appointmentFormEl.addEventListener('submit', function (e) {
          // Clear previous errors
          ['firstNameError', 'lastNameError', 'phoneError','emailError','serviceError','dateError','timeError','plotError'].forEach(id => {
            const el = document.getElementById(id);
            if (el) el.textContent = '';
          });

          const firstName = document.getElementById('firstName').value.trim();
          const lastName = document.getElementById('lastName').value.trim();
          const phone = document.getElementById('phone').value.trim();
          const email = document.getElementById('email').value.trim();
          const service = document.getElementById('service').value;
          const date = document.getElementById('date').value;
          const time = document.getElementById('time').value;
          let valid = true;

          if (!firstName) { document.getElementById('firstNameError').textContent = 'First name is required.'; valid = false; }
          if (!lastName) { document.getElementById('lastNameError').textContent = 'Last name is required.'; valid = false; }
          const phoneRe = /^[0-9\-\s\(\)\+]{7,20}$/;
          if (!phone || !phoneRe.test(phone)) { document.getElementById('phoneError').textContent = 'Enter a valid phone number.'; valid = false; }
          if (email && !/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(email)) { document.getElementById('emailError').textContent = 'Enter a valid email.'; valid = false; }
          if (!service) { document.getElementById('serviceError').textContent = 'Please select a service.'; valid = false; }
          // If burial or plot booking, ensure a plot is selected
          if (service === 'burial' || service === 'plot') {
            const pid = document.getElementById('plot_id').value;
            if (!pid) { document.getElementById('plotError').textContent = 'Please select a plot for this service.'; valid = false; }
          }
          // If burial, validate deceased fields
          if (service === 'burial') {
            const dfn = (deceasedFirstEl && deceasedFirstEl.value || '').trim();
            const dln = (deceasedLastEl && deceasedLastEl.value || '').trim();
            const bd = (birthDateEl && birthDateEl.value) || '';
            const dd = (deathDateEl && deathDateEl.value) || '';
            if (!dfn || !dln || !bd || !dd) {
              document.getElementById('deceasedError').textContent = 'Please fill deceased details for burial.';
              valid = false;
            }
          }
          if (!date) { document.getElementById('dateError').textContent = 'Please select a date.'; valid = false; }
          // time is only required for memorial and burial
          if ((service === 'memorial' || service === 'burial') && !time) { document.getElementById('timeError').textContent = 'Please select a time.'; valid = false; }

          // Prevent past dates
          if (date) {
            const sel = new Date(date + 'T' + (time || '00:00') + ':00');
            const now = new Date();
            if (sel < now) { document.getElementById('dateError').textContent = 'Date/time must be in the future.'; valid = false; }
          }

          // If cash selected and payment group visible, validate cash amount
          if (paymentGroup && paymentGroup.style.display !== 'none' && paymentMethodEl && paymentMethodEl.value === 'cash') {
            const amt = parseFloat(cashAmountEl.value);
            if (Number.isNaN(amt) || amt <= 0) {
              document.getElementById('cashError').textContent = 'Enter a valid amount received.'; valid = false;
            }
            // if downpayment option, validate monthly and months
            if (paymentOptionEl && paymentOptionEl.value === 'downpayment') {
              const monthly = parseFloat(monthlyAmountEl.value);
              const monthsVal = parseInt(monthsEl.value, 10);
              if (Number.isNaN(monthly) || monthly <= 0) {
                document.getElementById('downError').textContent = 'Enter a valid monthly amount.'; valid = false;
              }
              if (Number.isNaN(monthsVal) || monthsVal <= 0) {
                document.getElementById('downError').textContent = 'Enter a valid months count.'; valid = false;
              }
            }
          }

          if (!valid) {
            e.preventDefault();
            window.scrollTo({ top: 0, behavior: 'smooth' });
          }
        });
      }
    });
  </script>
</body>
</html>
